===== containers\BulkBar.container.tsx =====
"use client";
import React, { forwardRef, useImperativeHandle, useMemo, useState } from "react";
import { RequestRow } from "@/lib/admin/types";
import BulkBarUI from "@/components/admin/requests/ui/BulkBar.ui";
import ConfirmUI from "@/components/admin/requests/ui/Confirm.ui";

type Props = {
  allRows: RequestRow[];
  selectedIds: Set<string>;
  clearSelection: () => void;

  onApproveSelected: (ids: string[]) => Promise<void> | void;
  onRejectSelected: (ids: string[]) => Promise<void> | void;
  onDeleteSelected: (ids: string[]) => Promise<void> | void;
  onExportSelected: (rows: RequestRow[]) => void;
};

export type BulkBarHandle = {
  approveSelected: () => void;
  rejectSelected: () => void;
  deleteSelected: () => void;
  exportSelected: () => void;
  clear: () => void;
};

type BusyKind = "approve" | "reject" | "delete" | null;

function BulkBarContainerInner(
  { allRows, selectedIds, clearSelection, onApproveSelected, onRejectSelected, onDeleteSelected, onExportSelected }: Props,
  ref: React.Ref<BulkBarHandle>
) {
  const ids = useMemo(() => [...selectedIds], [selectedIds]);
  const selectedRows = useMemo(() => allRows.filter((r) => selectedIds.has(r.id)), [allRows, selectedIds]);
  const selectedCount = ids.length;

  const breakdown: Record<string, number> = useMemo(() => {
    const b: Record<string, number> = {};
    selectedRows.forEach((r) => (b[r.status] = (b[r.status] ?? 0) + 1));
    return b;
  }, [selectedRows]);

  const [confirm, setConfirm] = useState<{ open: boolean; kind?: "reject" | "delete" }>({ open: false });
  const [busy, setBusy] = useState<BusyKind>(null);

  async function doApprove() {
    if (!ids.length || busy) return;
    try {
      setBusy("approve");
      await onApproveSelected(ids);
      clearSelection();
    } finally {
      setBusy(null);
    }
  }

  async function doConfirm(kind: "reject" | "delete") {
    if (!ids.length || busy) return;
    try {
      setBusy(kind);
      if (kind === "reject") await onRejectSelected(ids);
      if (kind === "delete") await onDeleteSelected(ids);
      clearSelection();
    } finally {
      setBusy(null);
      setConfirm({ open: false });
    }
  }

  useImperativeHandle(ref, () => ({
    approveSelected: doApprove,
    rejectSelected: () => setConfirm({ open: true, kind: "reject" }),
    deleteSelected: () => setConfirm({ open: true, kind: "delete" }),
    exportSelected: () => onExportSelected(selectedRows),
    clear: clearSelection,
  }));

  return (
    <>
      <BulkBarUI
        selectedCount={selectedCount}
        breakdown={breakdown}
        onApprove={doApprove}
        onReject={() => setConfirm({ open: true, kind: "reject" })}
        onDelete={() => setConfirm({ open: true, kind: "delete" })}
        onExport={() => onExportSelected(selectedRows)}
        onClear={clearSelection}
        busy={busy}
      />

      <ConfirmUI
        open={confirm.open}
        title={confirm.kind === "delete" ? "Delete selected requests?" : "Reject selected requests?"}
        message={
          confirm.kind === "delete"
            ? `This will permanently remove ${selectedCount} ${selectedCount === 1 ? "request" : "requests"}.`
            : `This will mark ${selectedCount} ${selectedCount === 1 ? "request" : "requests"} as Rejected.`
        }
        confirmText={confirm.kind === "delete" ? "Delete" : "Reject"}
        confirmClass="bg-red-600 text-white"
        onCancel={() => setConfirm({ open: false })}
        onConfirm={() => doConfirm(confirm.kind!)}
      />
    </>
  );
}

const BulkBarContainer = forwardRef<BulkBarHandle, Props>(BulkBarContainerInner);
export default BulkBarContainer;


===== containers\FiltersBar.container.tsx =====
// src/components/admin/requests/containers/FiltersBar.container.tsx
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import type { FilterState, RequestRow } from "@/lib/admin/types";

/** Default filter values */
const DEFAULTS: FilterState = {
  status: "All",
  dept: "All",
  search: "",
  from: "",
  to: "",
  mode: "auto",
};

function parseParams(sp: URLSearchParams): FilterState {
  return {
    status: (sp.get("status") as FilterState["status"]) || "All",
    dept: (sp.get("dept") as FilterState["dept"]) || "All",
    from: sp.get("from") || "",
    to: sp.get("to") || "",
    search: sp.get("search") || "",
    mode: (sp.get("mode") as FilterState["mode"]) || "auto",
  };
}

export type FiltersControls = {
  draft: FilterState;
  onDraftChange: (next: Partial<FilterState>) => void;
  onApply: () => void;
  onClearAll: () => void;
  resultCount: number;
};

export default function FiltersBarContainer({
  rows,
  onFiltered,
  children,
}: {
  rows: RequestRow[];
  onFiltered: (filtered: RequestRow[]) => void;
  /** Optional render-prop so we can place the Filter button wherever we like (e.g. next to Search) */
  children?: (controls: FiltersControls) => React.ReactNode;
}) {
  const searchParams =
    typeof window !== "undefined"
      ? new URLSearchParams(window.location.search)
      : (new URLSearchParams() as any);

  const mounted = useRef(false);

  // init from URL (or defaults)
  const [applied, setApplied] = useState<FilterState>(() => parseParams(searchParams) || DEFAULTS);
  const [draft, setDraft] = useState<FilterState>(() => parseParams(searchParams) || DEFAULTS);

  // compute filtered rows
  const filtered = useMemo(() => filterRows(rows ?? [], applied), [rows, applied]);

  // push to parent on change
  useEffect(() => {
    if (!mounted.current) return;
    onFiltered(filtered);
  }, [filtered, onFiltered]);

  // initial mount: notify parent and mark mounted
  useEffect(() => {
    onFiltered(filtered);
    mounted.current = true;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Saved Views events (headless; UI handled where button is rendered)
  useEffect(() => {
    function saveView() {
      try {
        const views: Array<{ name: string; state: FilterState }> = JSON.parse(localStorage.getItem("tl.requests.views") || "[]");
        const name = window.prompt("Save filters as…", "My Dept Pending");
        if (!name) return;
        const next = [...views.filter((v) => v.name !== name), { name, state: applied }];
        localStorage.setItem("tl.requests.views", JSON.stringify(next));
        window.dispatchEvent(new StorageEvent("storage", { key: "tl.requests.views", newValue: JSON.stringify(next) }));
      } catch {
        // ignore
      }
    }
    function applyView(e: Event) {
      try {
        const name = (e as CustomEvent<string>).detail;
        const views: Array<{ name: string; state: FilterState }> = JSON.parse(localStorage.getItem("tl.requests.views") || "[]");
        const found = views.find((v) => v.name === name);
        if (found) {
          setDraft(found.state);
          setApplied(found.state);
        }
      } catch {
        // ignore
      }
    }
    window.addEventListener("requests.saveView", saveView as any);
    window.addEventListener("requests.applyView", applyView as any);
    return () => {
      window.removeEventListener("requests.saveView", saveView as any);
      window.removeEventListener("requests.applyView", applyView as any);
    };
  }, [applied]);

  function onDraftChange(next: Partial<FilterState>) {
    const nextDraft = { ...draft, ...next };
    setDraft(nextDraft);
    if (nextDraft.mode === "auto") setApplied(nextDraft); // realtime apply
  }
  function onApply() {
    setApplied(draft);
  }
  function onClearAll() {
    setDraft(DEFAULTS);
    setApplied(DEFAULTS);
  }

  if (children) {
    return <>{children({ draft, onDraftChange, onApply, onClearAll, resultCount: filterRows(rows ?? [], draft).length })}</>;
  }
  // Headless by default (no UI). We place the button next to Search in the table toolbar.
  return null;
}

function filterRows(rows: RequestRow[], f: FilterState): RequestRow[] {
  return (rows ?? []).filter((r) => {
    const okStatus = f.status === "All" || r.status === f.status;
    const okDept = f.dept === "All" || r.dept === f.dept;
    const q = (f.search ?? "").trim().toLowerCase();
    const okSearch =
      !q ||
      r.id.toLowerCase().includes(q) ||
      r.purpose.toLowerCase().includes(q) ||
      r.dept.toLowerCase().includes(q) ||
      (r.requester ?? "").toLowerCase().includes(q) ||
      (r.driver ?? "").toLowerCase().includes(q) ||
      (r.vehicle ?? "").toLowerCase().includes(q);
    const okFrom = !f.from || r.date >= f.from;
    const okTo = !f.to || r.date <= f.to;
    return okStatus && okDept && okSearch && okFrom && okTo;
  });
}


===== filters\FilterDropdown.ui.tsx =====
// src/components/admin/requests/filters/FilterDropdown.ui.tsx
"use client";
import * as React from "react";
import type { FilterState } from "@/lib/admin/types";
import useOutsideClick from "../hooks/useOutsideClick";
import { Filter as FilterIcon, ChevronDown } from "lucide-react";

const statuses: Array<FilterState["status"]> = [
  "All",
  "Pending",
  "Approved",
  "Completed",
  "Rejected",
];
const depts: Array<FilterState["dept"]> = ["All", "CCMS", "HR", "Registrar", "Finance"];

export default function FilterDropdownUI({
  draft,
  onDraftChange,
  onApply,
  onClearAll,
}: {
  draft: FilterState;
  onDraftChange: (n: Partial<FilterState>) => void;
  onApply: () => void;
  onClearAll: () => void;
}) {
  const [open, setOpen] = React.useState(false);
  const ref = React.useRef<HTMLDivElement>(null);

  useOutsideClick(ref, () => setOpen(false));

  const set = <K extends keyof FilterState>(k: K, v: FilterState[K]) =>
    onDraftChange({ [k]: v } as Pick<FilterState, K>);

  // highlight icon if any filter is active
  const hasActive =
    draft.status !== "All" ||
    draft.dept !== "All" ||
    !!draft.from ||
    !!draft.to ||
    !!(draft.search && draft.search.trim());

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={(e) => {
          e.stopPropagation();
          setOpen((v) => !v);
        }}
        aria-haspopup="menu"
        aria-expanded={open}
        className="inline-flex items-center gap-2 rounded-full border border-neutral-300 bg-white px-3 py-1.5 text-sm text-neutral-700 shadow-sm hover:bg-neutral-50"
      >
        {/* 🔎 Filter icon */}
        <FilterIcon className={`h-4 w-4 ${hasActive ? "text-[#7a1f2a]" : "text-neutral-500"}`} />
        <span>Filter</span>
        <ChevronDown className="h-4 w-4 text-neutral-500" />
      </button>

      {open && (
        <div
          className="absolute left-0 z-30 mt-2 w-[320px] rounded-xl border border-neutral-200 bg-white p-3 text-sm shadow-xl"
          onClick={(e) => e.stopPropagation()}
        >
          <Field label="Status">
            <select
              className="w-full rounded-lg border px-2 py-2"
              value={draft.status}
              onChange={(e) => set("status", e.target.value as FilterState["status"])}
            >
              {statuses.map((s) => (
                <option key={s} value={s}>
                  {s}
                </option>
              ))}
            </select>
          </Field>

          <Field label="Department">
            <select
              className="w-full rounded-lg border px-2 py-2"
              value={draft.dept}
              onChange={(e) => set("dept", e.target.value as FilterState["dept"])}
            >
              {depts.map((d) => (
                <option key={d} value={d}>
                  {d}
                </option>
              ))}
            </select>
          </Field>

          <div className="grid grid-cols-2 gap-2">
            <Field label="From">
              <input
                type="date"
                className="w-full rounded-lg border px-2 py-2"
                value={draft.from || ""}
                onChange={(e) => set("from", e.target.value || "")}
              />
            </Field>
            <Field label="To">
              <input
                type="date"
                className="w-full rounded-lg border px-2 py-2"
                value={draft.to || ""}
                onChange={(e) => set("to", e.target.value || "")}
              />
            </Field>
          </div>

          <Field label="Mode">
            <select
              className="w-full rounded-lg border px-2 py-2"
              value={draft.mode}
              onChange={(e) => set("mode", e.target.value as FilterState["mode"])}
            >
              <option value="auto">Auto (instant)</option>
              <option value="apply">Apply (manual)</option>
            </select>
          </Field>

          <div className="grid grid-cols-2 gap-2 pt-1">
            <button
              className="rounded-lg border px-3 py-2 text-sm"
              onClick={() => {
                onClearAll();
                setOpen(false);
              }}
            >
              Clear All
            </button>
            <button
              className="rounded-lg bg-[#7a1f2a] px-3 py-2 text-sm font-medium text-white"
              onClick={() => {
                if (draft.mode === "apply") onApply();
                setOpen(false);
              }}
            >
              Apply
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

function Field({ label, children }: { label: string; children: React.ReactNode }) {
  return (
    <div className="space-y-1 mb-3">
      <div className="text-xs font-medium text-neutral-600">{label}</div>
      {children}
    </div>
  );
}


===== filters\SavedViews.button.tsx =====
"use client";
import * as React from "react";
import type { FilterState } from "@/lib/admin/types";

const LS_KEY = "travilink.requests.savedViews.v1";

type SavedView = { id: string; name: string; filters: FilterState; createdAt: number };

function loadViews(): SavedView[] {
  try {
    const raw = localStorage.getItem(LS_KEY);
    return raw ? (JSON.parse(raw) as SavedView[]) : [];
  } catch { return []; }
}
function saveViews(list: SavedView[]) {
  localStorage.setItem(LS_KEY, JSON.stringify(list));
}

export default function SavedViewsButton({
  current,
  onApply,
}: {
  current: FilterState;
  onApply: (f: FilterState) => void;
}) {
  const [open, setOpen] = React.useState(false);
  const [views, setViews] = React.useState<SavedView[]>([]);
  const [name, setName] = React.useState("");

  React.useEffect(() => { setViews(loadViews()); }, []);

  function add() {
    const n = name.trim() || defaultName(current);
    const v: SavedView = { id: crypto.randomUUID(), name: n, filters: current, createdAt: Date.now() };
    const next = [v, ...views];
    setViews(next); saveViews(next); setName(""); setOpen(false);
  }
  function del(id: string) {
    const next = views.filter(v => v.id !== id);
    setViews(next); saveViews(next);
  }
  function apply(v: SavedView) {
    onApply(v.filters);
    setOpen(false);
  }

  return (
    <div className="relative">
      <button
        className="rounded border px-3 py-1 text-sm"
        onClick={() => setOpen(o => !o)}
        title="Saved filter presets"
      >
        Saved Views
      </button>

      {open && (
        <div className="absolute right-0 z-30 mt-2 w-[320px] rounded border bg-white p-3 shadow-lg">
          <div className="mb-2 text-sm font-medium">Saved Views</div>

          {views.length === 0 && (
            <div className="mb-2 text-xs text-neutral-500">No views yet. Save your current filters below.</div>
          )}

          <ul className="mb-3 max-h-56 space-y-1 overflow-auto pr-1">
            {views.map(v => (
              <li key={v.id} className="flex items-center justify-between gap-2 rounded border px-2 py-1">
                <button
                  className="truncate text-left text-sm text-blue-600 hover:underline"
                  onClick={() => apply(v)}
                  title="Apply this view"
                >
                  {v.name}
                </button>
                <button
                  className="text-xs text-red-600"
                  onClick={() => del(v.id)}
                  title="Delete view"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>

          <div className="flex items-center gap-2">
            <input
              className="w-full rounded border px-2 py-1 text-sm"
              placeholder="Name this view (optional)"
              value={name}
              onChange={(e) => setName(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && add()}
            />
            <button className="rounded bg-neutral-800 px-3 py-1 text-sm text-white" onClick={add}>
              Save current
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

function defaultName(f: FilterState) {
  const parts: string[] = [];
  if (f.status !== "All") parts.push(f.status);
  if (f.dept !== "All") parts.push(f.dept);
  if (f.from || f.to) parts.push(`${f.from || "…"}→${f.to || "…"}`);
  if (f.search) parts.push(`"${f.search}"`);
  return parts.join(" · ") || "My view";
}


===== hooks\useFilterState.ts =====
"use client";
import { useEffect, useMemo, useState } from "react";
import type { FilterState, RequestRow } from "@/lib/admin/types";

export const DEFAULT_FILTERS: FilterState = {
  status: "All",
  dept: "All",
  from: "",
  to: "",
  search: "",
  mode: "auto",
};

export function useFilterState(initial: FilterState = DEFAULT_FILTERS) {
  const [applied, setApplied] = useState<FilterState>(initial);
  const [draft, setDraft] = useState<FilterState>(initial);

  function apply() { setApplied(draft); }
  function clearAll() { setDraft(DEFAULT_FILTERS); setApplied(DEFAULT_FILTERS); }
  function update(next: Partial<FilterState>) {
    const n = { ...draft, ...next };
    setDraft(n);
    if (n.mode === "auto") setApplied(n);
  }
  return { draft, applied, update, apply, clearAll, setDraft };
}

export function filterRows(rows: RequestRow[], f: FilterState) {
  const q = (f.search ?? "").toLowerCase().trim();
  return rows.filter(r => {
    const okStatus = f.status === "All" || r.status === f.status;
    const okDept = f.dept === "All" || r.dept === f.dept;
    const okSearch = !q || r.id.toLowerCase().includes(q) ||
      r.purpose.toLowerCase().includes(q) || r.dept.toLowerCase().includes(q);
    const okFrom = !f.from || r.date >= f.from!;
    const okTo = !f.to || r.date <= f.to!;
    return okStatus && okDept && okSearch && okFrom && okTo;
  });
}

export const useFilteredRows = (rows: RequestRow[], f: FilterState) =>
  useMemo(() => filterRows(rows, f), [rows, f]);

export const isFiltered = (f: FilterState) =>
  f.status !== "All" || f.dept !== "All" || !!f.from || !!f.to;


===== hooks\useOutsideClick.ts =====
// hooks/useOutsideClick.ts
"use client";
import * as React from "react";

export default function useOutsideClick<T extends HTMLElement>(
  ref: React.RefObject<T | null>,                     // <-- accept `null` here
  onOutside: (ev: MouseEvent | TouchEvent) => void
) {
  React.useEffect(() => {
    function handler(ev: MouseEvent | TouchEvent) {
      const el = ref.current;
      if (!el) return;
      if (el.contains(ev.target as Node)) return;
      onOutside(ev);
    }
    document.addEventListener("mousedown", handler);
    document.addEventListener("touchstart", handler, { passive: true });
    return () => {
      document.removeEventListener("mousedown", handler);
      document.removeEventListener("touchstart", handler);
    };
  }, [ref, onOutside]);
}


===== toolbar\RequestsToolbar.ui.tsx =====
// src/components/admin/requests/toolbar/RequestsToolbar.ui.tsx
"use client";

import * as React from "react";
import { SortAsc, SortDesc, Plus, Filter } from "lucide-react";
import type { FilterState } from "@/lib/admin/types";
import FilterDropdownUI from "../filters/FilterDropdown.ui";

type Sort = "newest" | "oldest";

type Props = {
  // search
  q: string;
  onQChange: (v: string) => void;

  // sort
  sort: Sort; // "newest" | "oldest"
  onSortChange: (s: Sort) => void;

  // actions
  onAddNew: () => void;

  // filters (flat, modern)
  draft: FilterState;
  onDraftChange: (n: Partial<FilterState>) => void;
  onApply: () => void;
  onClearAll: () => void;
};

export default function RequestsToolbar({
  q,
  onQChange,
  sort,
  onSortChange,
  onAddNew,
  draft,
  onDraftChange,
  onApply,
  onClearAll,
}: Props) {
  return (
    <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
      {/* left: search + filter */}
      <div className="flex items-center gap-2">
        <div className="relative">
          <input
            value={q}
            onChange={(e) => onQChange(e.target.value)}
            placeholder="Search requests…"
            className="h-9 w-[240px] rounded-md border border-neutral-300 bg-white pl-3 pr-9 text-sm outline-none focus:ring-2 focus:ring-[#7a1f2a]/40"
          />
          <Filter
            size={16}
            className="pointer-events-none absolute right-2 top-1/2 -translate-y-1/2 text-neutral-400"
          />
        </div>

        <FilterDropdownUI
          draft={draft}
          onDraftChange={onDraftChange}
          onApply={onApply}
          onClearAll={onClearAll}
        />
      </div>

      {/* right: sort + add */}
      <div className="flex items-center gap-2">
        <button
          type="button"
          onClick={() => onSortChange(sort === "newest" ? "oldest" : "newest")}
          className="inline-flex items-center gap-1 rounded-full border border-neutral-300 bg-white px-3 py-1.5 text-sm text-neutral-700 shadow-sm hover:bg-neutral-50"
          aria-label="Toggle sort"
        >
          {sort === "newest" ? <SortDesc size={16} /> : <SortAsc size={16} />}
          {sort === "newest" ? "Newest first" : "Oldest first"}
        </button>

        <button
          type="button"
          onClick={onAddNew}
          className="inline-flex items-center gap-2 rounded-md bg-[#7a1f2a] px-3 py-2 text-sm font-medium text-white hover:opacity-95"
        >
          <Plus size={16} />
          Add New
        </button>
      </div>
    </div>
  );
}


===== ui\BulkBar.ui.tsx =====
"use client";

import * as React from "react";
import { CheckCircle2, XCircle, Trash2, FileDown, HelpCircle } from "lucide-react";

type BusyKind = "approve" | "reject" | "delete" | null;

type Props = {
  selectedCount: number;
  breakdown: Record<string, number>;
  onApprove: () => void;
  onReject: () => void; // opens confirm
  onDelete: () => void; // opens confirm
  onExport: () => void;
  onClear: () => void;
  busy?: BusyKind;
};

export default function BulkBarUI({
  selectedCount,
  breakdown,
  onApprove,
  onReject,
  onDelete,
  onExport,
  onClear,
  busy = null,
}: Props) {
  const disabled = selectedCount === 0 || busy !== null;

  const summary =
    selectedCount > 0
      ? `${selectedCount} selected` +
        Object.entries(breakdown)
          .map(([status, n]) => ` · ${n} ${status}`)
          .join("")
      : "No selection";

  return (
    <div className="admin-bulkbar z-[29] flex items-center gap-3 rounded-xl border border-neutral-200 bg-white px-3 py-2 shadow-sm">
      <div className="text-sm font-medium text-neutral-700">{summary}</div>

      <div className="ml-auto flex flex-wrap items-center gap-2">
        <ActionButton
          label="Approve"
          icon={<CheckCircle2 className="h-4 w-4" />}
          onClick={onApprove}
          disabled={disabled}
          busy={busy === "approve"}
          variant="success"
          title="Approve selected (Ctrl+Enter)"
        />
        <ActionButton
          label="Reject"
          icon={<XCircle className="h-4 w-4" />}
          onClick={onReject}
          disabled={disabled}
          busy={busy === "reject"}
          variant="danger"
          title="Reject selected"
        />
        <ActionButton
          label="Delete"
          icon={<Trash2 className="h-4 w-4" />}
          onClick={onDelete}
          disabled={disabled}
          busy={busy === "delete"}
          variant="neutral"
          title="Delete selected"
        />
        <GhostButton
          label="Export"
          icon={<FileDown className="h-4 w-4" />}
          onClick={onExport}
          disabled={disabled}
          title="Export selected to CSV"
        />
        <GhostButton label="Clear" onClick={onClear} disabled={disabled} title="Clear selection" />

        {/* Hotkeys helper */}
        <div className="relative group ml-2">
          <button
            type="button"
            className="flex items-center gap-1 rounded-lg border border-neutral-200 bg-white px-2 py-1 text-xs text-neutral-600 shadow-sm hover:bg-neutral-50"
            title="Keyboard shortcuts"
          >
            <HelpCircle className="h-4 w-4" />
            Shortcuts
          </button>
          <div className="admin-popover pointer-events-none absolute right-0 top-full mt-2 hidden w-64 rounded-lg border border-neutral-200 bg-white p-3 text-xs text-neutral-700 shadow-lg group-hover:block">
            <p className="mb-1 flex items-center justify-between">
              <span>Select all on page</span>
              <kbd className="kbd">A</kbd>
            </p>
            <p className="mb-1 flex items-center justify-between">
              <span>Clear selection</span>
              <kbd className="kbd">X</kbd>
            </p>
            <p className="mb-1 flex items-center justify-between">
              <span>Prev / Next page</span>
              <span className="flex items-center gap-1">
                <kbd className="kbd">←</kbd>
                <kbd className="kbd">→</kbd>
              </span>
            </p>
            <p className="flex items-center justify-between">
              <span>Approve selected</span>
              <span className="flex items-center gap-1">
                <kbd className="kbd">Ctrl</kbd>
                <kbd className="kbd">Enter</kbd>
              </span>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

/* ---------- Buttons ---------- */

function ActionButton({
  label,
  icon,
  onClick,
  disabled,
  busy,
  variant = "neutral",
  title,
}: {
  label: string;
  icon: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
  busy?: boolean;
  variant?: "success" | "danger" | "neutral";
  title?: string;
}) {
  const base =
    "inline-flex items-center gap-1 rounded-lg px-3 py-1.5 text-xs font-medium shadow-sm disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-offset-1";
  const look =
    variant === "success"
      ? "bg-emerald-600 text-white hover:bg-emerald-700 focus:ring-emerald-300"
      : variant === "danger"
      ? "bg-rose-600 text-white hover:bg-rose-700 focus:ring-rose-300"
      : "border border-neutral-200 bg-white text-neutral-700 hover:bg-neutral-50 focus:ring-neutral-300";

  return (
    <button className={`${base} ${look}`} onClick={onClick} disabled={disabled || busy} title={title}>
      {busy ? <Spinner /> : icon}
      {label}
    </button>
  );
}

function GhostButton({
  label,
  icon,
  onClick,
  disabled,
  title,
}: {
  label: string;
  icon?: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
  title?: string;
}) {
  return (
    <button
      className="inline-flex items-center gap-1 rounded-lg border border-neutral-200 bg-white px-3 py-1.5 text-xs font-medium text-neutral-700 shadow-sm hover:bg-neutral-50 disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-neutral-300 focus:ring-offset-1"
      onClick={onClick}
      disabled={disabled}
      title={title}
    >
      {icon}
      {label}
    </button>
  );
}

function Spinner() {
  return (
    <svg className="h-4 w-4 animate-spin" viewBox="0 0 24 24" aria-hidden="true">
      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" className="opacity-25" />
      <path d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4z" fill="currentColor" className="opacity-75" />
    </svg>
  );
}

/* Tailwind “kbd” utility (no styled-jsx) */
declare module "react" {
  interface HTMLAttributes<T> {
    // allow className "kbd" without TS complaining
  }
}


===== ui\Confirm.ui.tsx =====
"use client";
type Props = {
  open: boolean;
  title: string;
  message: string;
  confirmText?: string;
  confirmClass?: string;
  onConfirm: () => void;
  onCancel: () => void;
};
export default function ConfirmUI({
  open,
  title,
  message,
  confirmText = "Confirm",
  confirmClass = "bg-red-600 text-white",
  onConfirm,
  onCancel,
}: Props) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50">
      <div className="absolute inset-0 bg-black/40" onClick={onCancel} />
      <div className="absolute left-1/2 top-1/2 w-[420px] -translate-x-1/2 -translate-y-1/2 rounded-xl border bg-white p-4 shadow-xl">
        <h3 className="mb-2 text-lg font-semibold">{title}</h3>
        <p className="mb-4 text-sm text-neutral-700">{message}</p>
        <div className="flex justify-end gap-2">
          <button className="rounded border px-3 py-1.5 text-sm" onClick={onCancel}>
            Cancel
          </button>
          <button
            className={`rounded px-3 py-1.5 text-sm ${confirmClass}`}
            onClick={onConfirm}
          >
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
}


===== ui\Pagination.tsx =====
"use client";
export default function Pagination({
  page, pageSize, total, onPage, onSize,
}: {
  page: number; pageSize: number; total: number;
  onPage: (p: number) => void;
  onSize: (s: number) => void;
}) {
  const max = Math.max(1, Math.ceil(total / pageSize));
  return (
    <div className="flex items-center gap-2">
      <button
        disabled={page <= 1}
        onClick={() => onPage(page - 1)}
        className="rounded-lg border border-neutral-300 bg-white px-2 py-1 text-sm text-neutral-700 shadow-sm disabled:opacity-50"
      >Prev</button>
      <button
        disabled={page >= max}
        onClick={() => onPage(page + 1)}
        className="rounded-lg border border-neutral-300 bg-white px-2 py-1 text-sm text-neutral-700 shadow-sm disabled:opacity-50"
      >Next</button>
      <select
        className="ml-2 rounded-lg border border-neutral-300 bg-white px-2 py-1 text-sm text-neutral-700 shadow-sm"
        value={pageSize}
        onChange={(e) => onSize(parseInt(e.target.value, 10))}
      >
        {[15, 20, 50].map(n => <option key={n} value={n}>{n} / page</option>)}
      </select>
    </div>
  );
}


===== ui\RequestDetails.ui.tsx =====
"use client";
import { RequestRow } from "@/lib/admin/types";

type Props = {
  open: boolean;
  onClose: () => void;
  request: RequestRow | null;
  onApprove?: (id: string) => void;
  onReject?: (id: string) => void;
};

export default function RequestDetailsUI({ open, onClose, request, onApprove, onReject }: Props) {
  if (!open || !request) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
      <div className="w-full max-w-xl rounded-xl bg-white p-6 shadow-xl">
        {/* header */}
        <div className="mb-3 flex items-center justify-between">
          <h2 className="text-lg font-semibold">Request {request.id}</h2>
          <button
            onClick={onClose}
            className="rounded px-2 py-1 text-neutral-500 hover:bg-neutral-100 hover:text-neutral-800"
            aria-label="Close"
          >
            ✕
          </button>
        </div>

        {/* body */}
        <div className="grid grid-cols-2 gap-x-6 gap-y-2 text-sm">
          <Label>Department</Label><Value>{request.dept}</Value>
          <Label>Date</Label><Value className="tabular-nums">{request.date}</Value>
          <Label>Status</Label><Value>{statusTag(request.status)}</Value>
          <Label>Requester</Label><Value>{request.requester ?? "—"}</Value>
          <Label>Vehicle</Label><Value>{request.vehicle ?? "—"}</Value>
          <Label>Driver</Label><Value>{request.driver ?? "—"}</Value>

          <div className="col-span-2 mt-3">
            <div className="text-sm font-medium text-neutral-600 mb-1">Purpose</div>
            <div className="rounded border bg-neutral-50 px-3 py-2">{request.purpose}</div>
          </div>
        </div>

        {/* footer */}
        <div className="mt-6 flex justify-end gap-2">
          {request.status === "Pending" && (
            <>
              <button
                onClick={() => onApprove?.(request.id)}
                className="rounded bg-green-600 px-3 py-1.5 text-sm text-white"
              >
                Approve
              </button>
              <button
                onClick={() => onReject?.(request.id)}
                className="rounded bg-red-600 px-3 py-1.5 text-sm text-white"
              >
                Reject
              </button>
            </>
          )}
          <button onClick={onClose} className="rounded bg-neutral-200 px-3 py-1.5 text-sm">
            Close
          </button>
        </div>
      </div>
    </div>
  );
}

function Label({ children }: { children: React.ReactNode }) {
  return <div className="text-neutral-500">{children}</div>;
}
function Value({ children, className = "" }: { children: React.ReactNode; className?: string }) {
  return <div className={`font-medium ${className}`}>{children}</div>;
}

function statusTag(s: RequestRow["status"]) {
  const c: Record<string, string> = {
    Pending: "bg-yellow-100 text-yellow-800",
    Approved: "bg-green-100 text-green-800",
    Completed: "bg-blue-100 text-blue-800",
    Rejected: "bg-red-100 text-red-800",
  };
  return <span className={`rounded px-2 py-1 text-xs font-medium ${c[s]}`}>{s}</span>;
}


===== ui\RequestDetailsModal.ui.tsx =====
"use client";
import * as React from "react";
import { RequestRow } from "@/lib/admin/types";

type Props = {
  open: boolean;
  onClose: () => void;
  row?: RequestRow;
  onApprove?: () => void;
  onReject?: () => void;
};

export default function RequestDetailsModalUI({
  open,
  onClose,
  row,
  onApprove,
  onReject,
}: Props) {
  React.useEffect(() => {
    function onEsc(e: KeyboardEvent) { if (e.key === "Escape") onClose(); }
    if (open) window.addEventListener("keydown", onEsc);
    return () => window.removeEventListener("keydown", onEsc);
  }, [open, onClose]);

  if (!open || !row) return null;
  const canAct = row.status === "Pending";

  return (
    <div
      className="fixed inset-0 z-50 flex items-start justify-center p-4 md:p-6"
      role="dialog"
      aria-modal="true"
      aria-labelledby="req-modal-title"
    >
      <div className="absolute inset-0 bg-black/40 backdrop-blur-[1px]" onClick={onClose} />

      <div className="relative w-[680px] max-w-[95vw] rounded-2xl bg-white shadow-2xl ring-1 ring-black/5">
        {/* Header */}
        <div className="flex items-center justify-between border-b px-5 py-3.5 md:px-6">
          <div className="flex items-center gap-3">
            <div className="grid h-9 w-9 place-items-center rounded-xl bg-neutral-100 text-neutral-700 text-sm font-semibold">
              TL
            </div>
            <div>
              <h2 id="req-modal-title" className="text-base md:text-lg font-semibold text-neutral-900">
                Request {row.id}
              </h2>
              <div className="mt-0.5 text-xs text-neutral-500">Details overview</div>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <StatusBadge status={row.status} />
            <button
              aria-label="Close"
              onClick={onClose}
              className="rounded-lg border bg-white px-2.5 py-1.5 text-sm text-neutral-700 hover:bg-neutral-50 active:scale-[0.98]"
            >
              Close
            </button>
          </div>
        </div>

        {/* Body */}
        <div className="max-h-[70vh] overflow-auto px-5 py-5 md:px-6 md:py-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3.5">
            <Field label="Department" value={row.dept} />
            <Field label="Date" value={row.date} />
            <Field label="Requester" value={row.requester ?? "—"} />
            <Field label="Driver" value={row.driver ?? "—"} />
            <Field label="Vehicle" value={row.vehicle ?? "—"} />
            <Field label="Purpose" value={row.purpose} className="md:col-span-2" tall />
          </div>
        </div>

        {/* Footer */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3 border-t px-5 py-3.5 md:px-6">
          <div className="text-xs text-neutral-500">
            Updated just now • Read-only view
          </div>

          {canAct ? (
            <div className="flex items-center gap-2">
              <button
                onClick={onReject}
                className="rounded-lg bg-red-600 px-3.5 py-2 text-sm font-medium text-white hover:bg-red-700 active:scale-[0.98]"
              >
                Reject
              </button>
              <button
                onClick={onApprove}
                className="rounded-lg bg-green-600 px-3.5 py-2 text-sm font-medium text-white hover:bg-green-700 active:scale-[0.98]"
              >
                Approve
              </button>
            </div>
          ) : (
            <span className="text-sm text-neutral-500">No actions available</span>
          )}
        </div>
      </div>
    </div>
  );
}

/* ---- small pieces ---- */

function Field({
  label,
  value,
  className = "",
  tall = false,
}: {
  label: string;
  value: React.ReactNode;
  className?: string;
  tall?: boolean;
}) {
  return (
    <div className={className}>
      <div className="mb-1 text-[11px] font-semibold tracking-wide text-neutral-500">
        {label.toUpperCase()}
      </div>
      <div
        className={
          "w-full rounded-xl border border-neutral-200 bg-neutral-50 px-3 py-2 text-[14px] text-neutral-900 " +
          (tall ? "min-h-[56px]" : "h-10 flex items-center")
        }
      >
        {value}
      </div>
    </div>
  );
}

function StatusBadge({ status }: { status: RequestRow["status"] }) {
  const map: Record<RequestRow["status"], string> = {
    Pending: "bg-amber-100 text-amber-800 ring-amber-200",
    Approved: "bg-emerald-100 text-emerald-800 ring-emerald-200",
    Completed: "bg-blue-100 text-blue-800 ring-blue-200",
    Rejected: "bg-rose-100 text-rose-800 ring-rose-200",
  };
  return (
    <span className={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium ring-1 ${map[status]}`}>
      {status}
    </span>
  );
}


===== ui\RequestsCardGrid.ui.tsx =====
"use client";

import * as React from "react";
import {
  CalendarDays,
  Clock,
  User,
  Truck,
  Building2,
  UserCircle2,
} from "lucide-react";
import type { RequestRow, Pagination } from "@/lib/admin/types";

type Props = {
  rows?: RequestRow[];
  pagination: Pagination;
  onPageChange: (page: number) => void;

  /** Selection for bulk actions */
  selectedIds?: Set<string>;
  onToggleOne?: (id: string) => void;

  /** Row UX */
  onRowClick?: (row: RequestRow) => void;
  onApproveRow?: (id: string) => Promise<void>;
  onRejectRow?: (id: string) => Promise<void>;
};

export default function RequestsCardGridUI({
  rows,
  pagination,
  onPageChange,
  selectedIds,
  onToggleOne,
  onRowClick,
  onApproveRow,
  onRejectRow,
}: Props) {
  const safeRows = Array.isArray(rows) ? rows : [];
  const sel = selectedIds instanceof Set ? selectedIds : new Set<string>();

  return (
    <div className="rounded-2xl bg-transparent">
      {/* Responsive auto-fit grid */}
      <div className="grid gap-5 [grid-template-columns:repeat(auto-fit,minmax(320px,1fr))]">
        {safeRows.map((r) => (
          <Card
            key={r.id}
            row={r}
            selected={sel.has(r.id)}
            onToggle={() => onToggleOne?.(r.id)}
            onOpen={() => onRowClick?.(r)}
            onApprove={onApproveRow ? () => onApproveRow(r.id) : undefined}
            onReject={onRejectRow ? () => onRejectRow(r.id) : undefined}
          />
        ))}

        {safeRows.length === 0 && (
          <div className="col-span-full py-10 text-center text-sm text-neutral-500">
            No requests to show.
          </div>
        )}
      </div>

      {/* Pagination */}
      <div className="mt-6 flex items-center justify-end gap-2">
        <button
          disabled={pagination.page <= 1}
          onClick={() => onPageChange(pagination.page - 1)}
          className="rounded-lg border border-neutral-200 bg-white px-3 py-1.5 text-sm text-neutral-700 shadow-sm hover:bg-neutral-50 disabled:opacity-50"
        >
          Prev
        </button>
        <button
          disabled={
            pagination.page >=
            Math.ceil(pagination.total / Math.max(1, pagination.pageSize))
          }
          onClick={() => onPageChange(pagination.page + 1)}
          className="rounded-lg border border-neutral-200 bg-white px-3 py-1.5 text-sm text-neutral-700 shadow-sm hover:bg-neutral-50 disabled:opacity-50"
        >
          Next
        </button>
        <div className="ml-2 text-xs text-neutral-500">
          Page {pagination.page} of{" "}
          {Math.max(
            1,
            Math.ceil(pagination.total / Math.max(1, pagination.pageSize))
          )}
        </div>
      </div>
    </div>
  );
}

/* ---------- Subcomponents ---------- */

function Card({
  row,
  selected,
  onToggle,
  onOpen,
  onApprove,
  onReject,
}: {
  row: RequestRow;
  selected?: boolean;
  onToggle?: () => void;
  onOpen?: () => void;
  onApprove?: () => void;
  onReject?: () => void;
}) {
  const received =
    (row as any).receivedAt ??
    (row as any).createdAt ??
    (row as any).submittedAt ??
    "—";

  const canAct = row.status === "Pending";

  return (
    <div
      className={[
        "group relative rounded-xl bg-white shadow-md transition-all hover:shadow-lg",
        // BLUE OUTLINE WHEN SELECTED
        selected ? "ring-2 ring-blue-500 ring-offset-2" : "ring-0",
      ].join(" ")}
    >
      {/* Full-card click opens details (kept behind controls via z-index) */}
      <button
        type="button"
        onClick={onOpen}
        className="absolute inset-0 z-0 rounded-xl"
        aria-label={`Open ${row.id} details`}
      />

      {/* Header */}
      <div className="relative z-10 flex items-center justify-between border-b border-neutral-100 px-4 py-3">
        <div className="flex items-center gap-3">
          {/* Selection checkbox triggers bulk actions */}
          <input
            type="checkbox"
            aria-label={`Select ${row.id}`}
            checked={!!selected}
            onChange={(e) => {
              e.stopPropagation();
              onToggle?.();
            }}
            onClick={(e) => e.stopPropagation()}
            className="h-4 w-4 cursor-pointer accent-blue-600"
          />
          <button
            type="button"
            onClick={(e) => {
              e.stopPropagation();
              onOpen?.();
            }}
            className="text-[14px] font-semibold text-[#7a1f2a] hover:underline"
            title="Open details"
          >
            {row.id}
          </button>
        </div>
        <StatusBadge status={row.status} />
      </div>

      {/* Body */}
      <div className="relative z-10 space-y-3 px-4 py-3 text-[13px] text-neutral-800">
        <div className="font-medium text-neutral-700">{row.purpose}</div>

        <Field
          icon={<Clock className="h-4 w-4 text-[#7a1f2a]" />}
          label="Received"
          value={received}
        />
        <Field
          icon={<CalendarDays className="h-4 w-4 text-[#7a1f2a]" />}
          label="Date"
          value={row.date}
        />
        <Field
          icon={<Building2 className="h-4 w-4 text-[#7a1f2a]" />}
          label="Department"
          value={row.dept}
        />
        <Field
          icon={<User className="h-4 w-4 text-[#7a1f2a]" />}
          label="Driver"
          value={row.driver ?? "—"}
        />
        <Field
          icon={<UserCircle2 className="h-4 w-4 text-[#7a1f2a]" />}
          label="Requester"
          value={row.requester ?? "—"}
        />
        <Field
          icon={<Truck className="h-4 w-4 text-[#7a1f2a]" />}
          label="Vehicle"
          value={row.vehicle ?? "—"}
        />
      </div>

      {/* Footer (actions won’t open details) */}
      <div className="relative z-10 flex items-center justify-end gap-2 border-t border-neutral-100 px-4 py-3">
        {canAct ? (
          <>
            <button
              className="rounded-lg bg-rose-600 px-3 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-rose-700"
              onClick={(e) => {
                e.stopPropagation();
                onReject?.();
              }}
            >
              Reject
            </button>
            <button
              className="rounded-lg bg-emerald-600 px-3 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-emerald-700"
              onClick={(e) => {
                e.stopPropagation();
                onApprove?.();
              }}
            >
              Approve
            </button>
          </>
        ) : (
          <span className="text-xs text-neutral-400">No actions available</span>
        )}
      </div>
    </div>
  );
}

function Field({
  icon,
  label,
  value,
}: {
  icon: React.ReactNode;
  label: string;
  value: string;
}) {
  return (
    <div className="flex items-center gap-2">
      {icon}
      <div>
        <div className="text-[11px] uppercase text-neutral-500">{label}</div>
        <div className="text-[13px] text-neutral-800">{value}</div>
      </div>
    </div>
  );
}

function StatusBadge({ status }: { status: RequestRow["status"] }) {
  const c: Record<RequestRow["status"], string> = {
    Pending: "bg-amber-100 text-amber-800",
    Approved: "bg-emerald-100 text-emerald-800",
    Completed: "bg-blue-100 text-blue-800",
    Rejected: "bg-rose-100 text-rose-800",
  };
  return (
    <span className={`rounded-full px-2 py-0.5 text-xs font-medium ${c[status]}`}>
      {status}
    </span>
  );
}


===== ui\RequestsSummary.ui.tsx =====
import { RequestsSummary } from "@/lib/admin/types";
import { Clock, CheckCircle2, Flag, XCircle } from "lucide-react";

export default function RequestsSummaryUI({ summary }: { summary: RequestsSummary }) {
  return (
    <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
      <Card
        label="Pending"
        value={summary.pending}
        icon={<Clock className="h-5 w-5 text-amber-600" />}
        barColor="bg-amber-500"
        pillColor="bg-amber-100 text-amber-700"
      />
      <Card
        label="Approved"
        value={summary.approved}
        icon={<CheckCircle2 className="h-5 w-5 text-emerald-600" />}
        barColor="bg-emerald-500"
        pillColor="bg-emerald-100 text-emerald-700"
      />
      <Card
        label="Completed"
        value={summary.completed}
        icon={<Flag className="h-5 w-5 text-blue-600" />}
        barColor="bg-blue-500"
        pillColor="bg-blue-100 text-blue-700"
      />
      <Card
        label="Rejected"
        value={summary.rejected}
        icon={<XCircle className="h-5 w-5 text-rose-600" />}
        barColor="bg-rose-500"
        pillColor="bg-rose-100 text-rose-700"
      />
    </div>
  );
}

function Card({
  label,
  value,
  icon,
  barColor,
  pillColor,
}: {
  label: string;
  value: number;
  icon: React.ReactNode;
  barColor: string;
  pillColor: string;
}) {
  return (
    <div className="flex flex-col rounded-xl border border-neutral-200 bg-white p-4 shadow-sm transition hover:shadow-md">
      <div className="flex items-center justify-between">
        <span className={`rounded-full px-2 py-0.5 text-xs font-medium ${pillColor}`}>
          {label}
        </span>
        {icon}
      </div>

      <div className="mt-3 text-3xl font-semibold text-neutral-800">{value}</div>

      <div className="mt-3 h-1.5 w-full overflow-hidden rounded-full bg-neutral-100">
        <div
          className={`h-full ${barColor}`}
          style={{ width: `${Math.min(100, value * 20)}%` }} // mock width (adjust as needed)
        />
      </div>
    </div>
  );
}


===== ui\RequestsTable.ui.tsx =====
// src/components/admin/requests/ui/RequestsTable.ui.tsx
"use client";

import * as React from "react";
import type { RequestRow, Pagination, FilterState } from "@/lib/admin/types";
import StatusBadge from "./StatusBadge";
import PaginationUI from "./Pagination";
import RequestsToolbar from "@/components/admin/requests/toolbar/RequestsToolbar.ui";

type Props = {
  rows: RequestRow[];
  pagination: Pagination;

  tableSearch: string;
  onTableSearch?: (q: string) => void;
  sortDir?: "asc" | "desc";
  onSortDirChange?: (d: "asc" | "desc") => void;
  onAddNew?: () => void;

  filterControls: {
    draft: FilterState;
    onDraftChange: (n: Partial<FilterState>) => void;
    onApply: () => void;
    onClearAll: () => void;
  };

  selectedIds?: Set<string>;
  onToggleOne: (id: string) => void;
  onToggleAllOnPage: (checked: boolean, idsOnPage: string[]) => void;

  onRowClick?: (row: RequestRow) => void;
  onRowViewDetails?: (row: RequestRow) => void;

  onPageChange: (page: number) => void;
  onPageSizeChange: (size: number) => void;

  onApproveRow?: (id: string) => Promise<void>;
  onRejectRow?: (id: string) => Promise<void>;
};

export default function RequestsTable(props: Props) {
  const {
    rows, pagination,
    tableSearch, onTableSearch,
    sortDir = "desc", onSortDirChange, onAddNew,
    filterControls, selectedIds,
    onToggleOne, onToggleAllOnPage,
    onRowClick, onRowViewDetails,
    onPageChange, onPageSizeChange,
    onApproveRow, onRejectRow
  } = props;

  const set = selectedIds ?? new Set<string>();
  const idsOnPage = rows.map(r => r.id);
  const allChecked = idsOnPage.length > 0 && idsOnPage.every(id => set.has(id));
  const indeterminate = !allChecked && idsOnPage.some(id => set.has(id));

  return (
    <div className="rounded-2xl border border-neutral-200 bg-white shadow-sm">
      {/* Sticky toolbar — sits under KPI */}
      <div className="admin-sticky-toolbar px-3 py-2">
        <RequestsToolbar
          q={tableSearch}
          onQChange={onTableSearch ?? (() => {})}
          sort={sortDir === "desc" ? "newest" : "oldest"}
          onSortChange={(s) => onSortDirChange?.(s === "newest" ? "desc" : "asc")}
          onAddNew={onAddNew ?? (() => {})}
          draft={filterControls.draft}
          onDraftChange={filterControls.onDraftChange}
          onApply={filterControls.onApply}
          onClearAll={filterControls.onClearAll}
        />
      </div>

      <div className="overflow-x-auto">
        {/* border-separate + spacing:0 keeps columns aligned with sticky thead */}
        <table className="w-full table-fixed text-sm border-separate [border-spacing:0]">
          <colgroup>
            {[44,110,140,null,170,120,120,150].map((w,i) => (
              <col key={i} style={w ? { width: w } : undefined} />
            ))}
          </colgroup>

          {/* ✅ sticky THEAD (inline top for reliability) */}
          <thead
            className="admin-thead-sticky sticky bg-white/90 backdrop-blur"
            style={{ top: "var(--stack-offset)" }}
          >
            <tr className="text-neutral-600">
              <Th>
                <input
                  aria-label="Select all on page"
                  type="checkbox"
                  checked={allChecked}
                  ref={(el) => { if (el) el.indeterminate = indeterminate; }}
                  onChange={(e) => onToggleAllOnPage(e.currentTarget.checked, idsOnPage)}
                />
              </Th>
              <Th>ID</Th>
              <Th>Department</Th>
              <Th className="truncate">Purpose</Th>
              <Th>Received</Th>
              <Th>Date</Th>
              <Th>Status</Th>
              <Th className="text-right">Actions</Th>
            </tr>
          </thead>

          <tbody className="[&_tr:nth-child(even)]:bg-neutral-50/40">
            {rows.map((r) => (
              <tr
                key={r.id}
                className="border-t border-neutral-200 hover:bg-neutral-50/80"
                onClick={() => onRowClick?.(r)}
              >
                <Td onClick={(e) => e.stopPropagation()}>
                  <input
                    aria-label={`Select ${r.id}`}
                    type="checkbox"
                    checked={set.has(r.id)}
                    onChange={() => onToggleOne(r.id)}
                  />
                </Td>

                <Td onClick={(e) => e.stopPropagation()}>
                  <button
                    className="text-[13px] font-semibold text-[#7a1f2a] underline-offset-2 hover:underline"
                    onClick={() => onRowViewDetails?.(r)}
                  >
                    {r.id}
                  </button>
                </Td>

                <Td>{r.dept}</Td>
                <Td className="truncate" title={r.purpose}>{r.purpose}</Td>
                <Td className="tabular-nums whitespace-nowrap">
                  {(r as any).receivedAt ?? (r as any).createdAt ?? "—"}
                </Td>
                <Td className="tabular-nums whitespace-nowrap">{r.date}</Td>
                <Td><StatusBadge status={r.status} /></Td>

                <Td className="text-right" onClick={(e) => e.stopPropagation()}>
                  {r.status === "Pending" ? (
                    <div className="inline-flex gap-2">
                      <button
                        className="rounded-lg bg-emerald-600 px-2.5 py-1 text-xs text-white"
                        onClick={() => onApproveRow?.(r.id)}
                      >
                        Approve
                      </button>
                      <button
                        className="rounded-lg bg-rose-600 px-2.5 py-1 text-xs text-white"
                        onClick={() => onRejectRow?.(r.id)}
                      >
                        Reject
                      </button>
                    </div>
                  ) : (
                    <span className="text-neutral-400">—</span>
                  )}
                </Td>
              </tr>
            ))}

            {rows.length === 0 && (
              <tr>
                <Td className="py-12 text-center text-neutral-500" colSpan={8}>
                  No requests to show.
                </Td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="flex flex-wrap items-center justify-between gap-3 px-3 py-2">
        <div className="text-xs text-neutral-500">
          Page {pagination.page} of {Math.max(1, Math.ceil(pagination.total / pagination.pageSize))}
          · Showing {Math.min(pagination.pageSize, rows.length)} of {pagination.total}
        </div>
        <PaginationUI
          page={pagination.page}
          pageSize={pagination.pageSize}
          total={pagination.total}
          onPage={onPageChange}
          onSize={onPageSizeChange}
        />
      </div>
    </div>
  );
}

/* cells */
function Th({ children, className = "" }: { children: React.ReactNode; className?: string }) {
  return <th className={`px-4 py-3 text-left text-xs font-semibold ${className}`}>{children}</th>;
}
function Td({
  children,
  className = "",
  colSpan,
  ...rest
}: {
  children: React.ReactNode;
  className?: string;
  colSpan?: number;
} & React.HTMLAttributes<HTMLTableCellElement>) {
  return (
    <td className={`px-4 py-3 align-middle text-[13px] text-neutral-800 ${className}`} colSpan={colSpan} {...rest}>
      {children}
    </td>
  );
}


===== ui\SavedViewsMenu.ui.tsx =====
"use client";
import * as React from "react";
import type { FilterState } from "@/lib/admin/types";

type SavedView = { name: string; filters: FilterState };

export default function SavedViewsMenu({
  views,
  onApplyView,
  onSaveCurrent,
  onDeleteView,
}: {
  views: SavedView[];
  onApplyView: (v: SavedView) => void;
  onSaveCurrent: () => void;
  onDeleteView: (name: string) => void;
}) {
  const [open, setOpen] = React.useState(false);

  return (
    <div className="relative">
      <button className="rounded border px-3 py-1 text-sm" onClick={() => setOpen((o) => !o)}>
        Saved Views
      </button>
      {open && (
        <div className="absolute z-30 mt-2 w-64 rounded border bg-white p-2 shadow">
          <div className="flex items-center justify-between">
            <div className="text-sm font-medium">Presets</div>
            <button className="text-xs text-blue-600" onClick={onSaveCurrent}>Save current</button>
          </div>
          <div className="mt-2 space-y-1">
            {views.length === 0 && <div className="text-xs text-neutral-500">No presets yet.</div>}
            {views.map((v) => (
              <div key={v.name} className="flex items-center justify-between rounded px-2 py-1 hover:bg-neutral-50">
                <button className="text-sm text-blue-700" onClick={() => onApplyView(v)}>
                  {v.name}
                </button>
                <button className="text-xs text-red-600" onClick={() => onDeleteView(v.name)}>
                  Delete
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}


===== ui\StatusBadge.tsx =====
"use client";
import type { RequestRow } from "@/lib/admin/types";

export default function StatusBadge({ status }: { status: RequestRow["status"] }) {
  const c: Record<RequestRow["status"], string> = {
    Pending: "bg-amber-100 text-amber-800",
    Approved: "bg-emerald-100 text-emerald-800",
    Completed: "bg-blue-100 text-blue-800",
    Rejected: "bg-rose-100 text-rose-800",
  };
  return <span className={`rounded-full px-2 py-0.5 text-xs font-medium ${c[status]}`}>{status}</span>;
}


===== ui\ViewToggle.ui.tsx =====
"use client";

import { LayoutList, LayoutGrid } from "lucide-react";

export default function ViewToggleUI({
  view,
  onChange,
  className = "",
}: {
  view: "table" | "card";
  onChange: (v: "table" | "card") => void;
  className?: string;
}) {
  return (
    <div className={`flex items-center justify-end gap-2 ${className}`}>
      <button
        onClick={() => onChange("table")}
        title="Table view (T)"
        className={`rounded-lg p-2 shadow-sm transition-colors outline-none focus:ring-2 focus:ring-[#7a1f2a]/30 ${
          view === "table"
            ? "bg-[#7a1f2a] text-white"
            : "bg-white text-neutral-600 hover:bg-neutral-50 border border-neutral-200"
        }`}
      >
        <LayoutList className="h-4 w-4" />
      </button>
      <button
        onClick={() => onChange("card")}
        title="Card view (C)"
        className={`rounded-lg p-2 shadow-sm transition-colors outline-none focus:ring-2 focus:ring-[#7a1f2a]/30 ${
          view === "card"
            ? "bg-[#7a1f2a] text-white"
            : "bg-white text-neutral-600 hover:bg-neutral-50 border border-neutral-200"
        }`}
      >
        <LayoutGrid className="h-4 w-4" />
      </button>
    </div>
  );
}


