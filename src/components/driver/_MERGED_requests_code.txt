===== Badge.tsx =====
export default function Badge({ children }: { children: React.ReactNode }) {
  return <span className="inline-flex items-center gap-1 rounded-full bg-brand-cream text-brand-maroon px-2.5 py-0.5 text-xs font-medium">{children}</span>;
}


===== Button.tsx =====
type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: "solid" | "outline" | "ghost";
  size?: "sm" | "md";
};

export default function Button({ variant="solid", size="md", className="", ...rest }: Props) {
  const base = "rounded-full font-medium transition outline-none focus:ring-2 focus:ring-brand-maroon/30 disabled:opacity-50 disabled:cursor-not-allowed";
  const sizes = { sm: "px-3 py-1 text-sm", md: "px-4 py-2" }[size];
  const variants = {
    solid:   "bg-brand-maroon text-white hover:bg-brand-maroon/90",
    outline: "border border-slate-300 text-slate-700 hover:bg-slate-50",
    ghost:   "text-slate-700 hover:bg-slate-100",
  }[variant];
  return <button className={`${base} ${sizes} ${variants} ${className}`} {...rest} />;
}


===== Chip.tsx =====
export default function Chip({
  color="gray",
  children,
}: { color?: "green"|"yellow"|"red"|"gray"|"blue"; children: React.ReactNode }) {
  const map: Record<string,string> = {
    green: "bg-green-100 text-green-700",
    yellow:"bg-yellow-100 text-yellow-700",
    red:   "bg-rose-100 text-rose-700",
    blue:  "bg-blue-100 text-blue-700",
    gray:  "bg-slate-100 text-slate-700",
  };
  return <span className={`inline-block rounded-full px-2.5 py-0.5 text-xs font-medium ${map[color]}`}>{children}</span>;
}


===== FleetSnapshot.tsx =====
"use client";

import * as React from "react";
import MaintenanceLogsDrawer, { type MaintenanceLog } from "@/components/driver/MaintenanceLogsDrawer";

export type FleetVehicle = {
  id: string;
  name: string;             // "Bus 12"
  plate: string;            // "ABC-1234"
  type: string;             // "Bus" | "Van" | "Truck"
  status: "available" | "offline" | "assigned";
  lastMaintenance?: string; // ISO "YYYY-MM-DD"
  nextDue?: string;         // ISO "YYYY-MM-DD"
  logs?: MaintenanceLog[];  // optional; enables View Logs
};

type Props = {
  title?: string;
  vehicles: FleetVehicle[];
};

// ✅ Named export (no default)
export function FleetSnapshot({ title = "Fleet Snapshot", vehicles }: Props) {
  const [open, setOpen] = React.useState(false);
  const [active, setActive] = React.useState<FleetVehicle | null>(null);

  function openLogs(v: FleetVehicle) {
    setActive(v);
    setOpen(true);
  }
  function closeLogs() {
    setOpen(false);
    setActive(null);
  }

  return (
    <section className="rounded-xl ring-1 ring-neutral-200/70 bg-white shadow-sm">
      <div className="flex items-center justify-between border-b border-neutral-200/80 px-4 py-3">
        <h2 className="font-medium">{title}</h2>
        <div className="text-xs text-neutral-500">{vehicles.length} vehicle(s)</div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-neutral-50 text-neutral-600">
            <tr>
              <Th>Name / Model</Th>
              <Th>Plate</Th>
              <Th>Type</Th>
              <Th>Status</Th>
              <Th>Last Maint.</Th>
              <Th>Next Due</Th>
              <Th className="text-right pr-4">Actions</Th>
            </tr>
          </thead>
          <tbody className="divide-y divide-neutral-200/70">
            {vehicles.map((v) => (
              <tr key={v.id} className="hover:bg-neutral-50/70">
                <Td><div className="font-medium">{v.name}</div></Td>
                <Td><span className="font-mono">{v.plate}</span></Td>
                <Td>{v.type}</Td>
                <Td>
                  <span className={`rounded px-2 py-0.5 text-xs ${tone(v.status)}`}>
                    {labelStatus(v.status)}
                  </span>
                </Td>
                <Td>{fmtDate(v.lastMaintenance)}</Td>
                <Td>{fmtDate(v.nextDue)}</Td>
                <Td className="text-right pr-4">
                  <button
                    className="rounded-md border border-neutral-200 px-2.5 py-1.5 text-xs hover:bg-neutral-50 disabled:opacity-50"
                    onClick={() => openLogs(v)}
                    disabled={!v.logs || v.logs.length === 0}
                    title={(!v.logs || v.logs.length === 0) ? "No logs available" : "View detailed maintenance logs"}
                  >
                    View Logs
                  </button>
                </Td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <MaintenanceLogsDrawer
        open={open}
        onClose={closeLogs}
        vehicle={active ? { id: active.id, name: active.name, plate: active.plate, type: active.type } : null}
        logs={active?.logs ?? []}
      />
    </section>
  );
}

function Th({ children, className="" }: React.PropsWithChildren<{ className?: string }>) {
  return <th className={`px-4 py-2 text-left font-medium ${className}`}>{children}</th>;
}
function Td({ children, className="" }: React.PropsWithChildren<{ className?: string }>) {
  return <td className={`px-4 py-2 align-middle ${className}`}>{children}</td>;
}

function labelStatus(s: FleetVehicle["status"]) {
  if (s === "available") return "Available";
  if (s === "assigned") return "Assigned";
  return "Unavailable";
}
function tone(s: FleetVehicle["status"]) {
  if (s === "available") return "bg-green-100 text-green-700";
  if (s === "assigned") return "bg-blue-100 text-blue-700";
  return "bg-neutral-100 text-neutral-700";
}

function fmtDate(iso?: string) {
  if (!iso) return "—";
  try {
    const d = new Date(iso);
    return d.toLocaleDateString(undefined, { year: "numeric", month: "short", day: "2-digit" });
  } catch {
    return iso;
  }
}


===== MaintenanceLogsDrawer.tsx =====
"use client";

import * as React from "react";

export type MaintenanceLog = {
  id: string;
  date: string;           // "YYYY-MM-DD"
  odometer?: number;      // km (optional)
  category: string;       // "Oil Change", "Brake Service", etc.
  description?: string;   // notes
  cost?: number;          // optional
  nextDueDate?: string;   // optional
};

export type VehicleLite = {
  id: string;
  name: string;           // "Bus 12"
  plate: string;          // "ABC-1234"
  type: string;           // "Bus" | "Van"
};

export default function MaintenanceLogsDrawer({
  open,
  onClose,
  vehicle,
  logs,
}: {
  open: boolean;
  onClose: () => void;
  vehicle?: VehicleLite | null;
  logs: MaintenanceLog[];
}) {
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-[70]">
      {/* backdrop */}
      <div
        className="absolute inset-0 bg-black/30"
        onClick={onClose}
        aria-hidden="true"
      />
      {/* drawer */}
      <aside
        className="absolute right-0 top-0 h-full w-full max-w-xl bg-white shadow-2xl ring-1 ring-neutral-200 animate-in slide-in-from-right"
        role="dialog"
        aria-modal="true"
      >
        <header className="sticky top-0 flex items-center justify-between border-b border-neutral-200 bg-white px-4 py-3">
          <div>
            <div className="text-xs text-neutral-500">{vehicle?.type}</div>
            <h2 className="text-lg font-semibold">
              {vehicle?.name} • {vehicle?.plate}
            </h2>
          </div>
          <button
            onClick={onClose}
            className="rounded-md px-3 py-1.5 text-sm border border-neutral-200 hover:bg-neutral-50"
          >
            Close
          </button>
        </header>

        <section className="p-4 space-y-3">
          {logs.length === 0 ? (
            <div className="rounded-lg border border-dashed border-neutral-200 p-6 text-center text-neutral-500">
              No maintenance logs for this vehicle.
            </div>
          ) : (
            logs
              .slice()
              .sort((a, b) => (a.date < b.date ? 1 : -1))
              .map((log) => (
                <article
                  key={log.id}
                  className="rounded-lg border border-neutral-200 p-4 bg-white"
                >
                  <div className="flex items-start justify-between">
                    <div>
                      <div className="text-sm text-neutral-500">
                        {formatDate(log.date)}
                      </div>
                      <div className="font-medium">{log.category}</div>
                    </div>
                    {log.nextDueDate && (
                      <span className="rounded px-2 py-0.5 text-xs bg-amber-50 text-amber-700 border border-amber-200">
                        Next due: {formatDate(log.nextDueDate)}
                      </span>
                    )}
                  </div>

                  {log.description && (
                    <p className="mt-2 text-sm text-neutral-700 whitespace-pre-wrap">
                      {log.description}
                    </p>
                  )}

                  <div className="mt-3 grid grid-cols-2 gap-2 text-xs text-neutral-600 sm:grid-cols-3">
                    {log.odometer !== undefined && (
                      <div className="rounded border border-neutral-200 px-2 py-1">
                        Odometer:{" "}
                        <span className="font-medium">
                          {log.odometer.toLocaleString()} km
                        </span>
                      </div>
                    )}
                    {log.cost !== undefined && (
                      <div className="rounded border border-neutral-200 px-2 py-1">
                        Cost:{" "}
                        <span className="font-medium">
                          {formatMoney(log.cost)}
                        </span>
                      </div>
                    )}
                    <div className="rounded border border-neutral-200 px-2 py-1">
                      Log ID: <span className="font-mono">{log.id}</span>
                    </div>
                  </div>
                </article>
              ))
          )}
        </section>
      </aside>
    </div>
  );
}

function formatDate(iso: string) {
  try {
    return new Date(iso).toLocaleDateString(undefined, {
      year: "numeric",
      month: "short",
      day: "2-digit",
    });
  } catch {
    return iso;
  }
}

function formatMoney(n: number) {
  try {
    return n.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });
  } catch {
    return String(n);
  }
}


===== MiniCalendar.tsx =====
"use client";

import { useEffect, useMemo, useState } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";

type CalEvent = { date: string; type: "trip"; label?: string };

const TRIPS_KEY = "travilink_trips";

// helpers – local YYYY-MM-DD (no UTC conversion)
const pad2 = (n: number) => String(n).padStart(2, "0");
const ymdLocal = (d: Date) =>
  `${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}`;

export default function MiniCalendar() {
  const today = new Date();
  const [view, setView] = useState({ y: today.getFullYear(), m: today.getMonth() });
  const [events, setEvents] = useState<CalEvent[]>([]);

  function loadEvents() {
    const all: CalEvent[] = [];
    try {
      const rawT = localStorage.getItem(TRIPS_KEY);
      if (rawT) {
        const trips = JSON.parse(rawT) as { date: string; label?: string }[];
        all.push(
          ...trips.map((t) => ({
            date: t.date.slice(0, 10), // normalize
            type: "trip" as const,
            label: t.label || "Trip",
          }))
        );
      }
    } catch {}
    setEvents(all);
  }

  useEffect(() => {
    loadEvents();
    const onStorage = (e: StorageEvent) => {
      if (e.key === TRIPS_KEY) loadEvents();
    };
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  const first = new Date(view.y, view.m, 1);
  const start = new Date(first);
  start.setDate(first.getDate() - first.getDay());

  const days = useMemo(() => {
    const arr: Date[] = [];
    for (let i = 0; i < 42; i++) {
      const d = new Date(start);
      d.setDate(start.getDate() + i);
      arr.push(d);
    }
    return arr;
  }, [view.y, view.m]);

  function prevMonth() {
    setView((v) => (v.m === 0 ? { y: v.y - 1, m: 11 } : { y: v.y, m: v.m - 1 }));
  }
  function nextMonth() {
    setView((v) => (v.m === 11 ? { y: v.y + 1, m: 0 } : { y: v.y, m: v.m + 1 }));
  }

  function eventsFor(d: Date) {
    const key = ymdLocal(d);
    return events.filter((e) => e.date === key);
  }

  const todayKey = ymdLocal(new Date());

  return (
    <section className="rounded-xl ring-1 ring-neutral-200/70 bg-white shadow-sm">
      <div className="flex items-center justify-between px-3 py-2 border-b border-neutral-200/80">
        <button onClick={prevMonth} className="p-1 rounded hover:bg-neutral-100" aria-label="Previous month">
          <ChevronLeft className="h-4 w-4" />
        </button>
        <div className="text-sm font-medium">
          {new Date(view.y, view.m, 1).toLocaleString(undefined, { month: "long", year: "numeric" })}
        </div>
        <button onClick={nextMonth} className="p-1 rounded hover:bg-neutral-100" aria-label="Next month">
          <ChevronRight className="h-4 w-4" />
        </button>
      </div>

      <div className="grid grid-cols-7 text-center text-[11px] text-neutral-600 px-3 pt-2 pb-1">
        {["Sun","Mon","Tue","Wed","Thu","Fri","Sat"].map((d) => (<div key={d}>{d}</div>))}
      </div>

      <div className="grid grid-cols-7 gap-1 p-3 pt-0">
        {days.map((d, i) => {
          const inMonth = d.getMonth() === view.m;
          const isToday = ymdLocal(d) === todayKey;
          const evts = eventsFor(d);
          const title = evts.map((e) => e.label || "Trip").join("\n");

          return (
            <div
              key={i}
              title={title || undefined}
              className={[
                "relative h-12 rounded-lg border text-xs p-1.5 text-right",
                inMonth ? "bg-white border-neutral-200/80 text-neutral-800" : "bg-neutral-50 border-neutral-100 text-neutral-400",
                isToday ? "ring-1 ring-[#7a0019]" : "",
              ].join(" ")}
            >
              {d.getDate()}
              <div className="absolute left-1.5 bottom-1.5 flex gap-1">
                {evts.some((e) => e.type === "trip") && <span className="h-2 w-2 rounded-full bg-green-600" />}
              </div>
            </div>
          );
        })}
      </div>

      <div className="flex items-center justify-between px-3 py-2 border-t border-neutral-200/80 text-[11px]">
        <div className="flex items-center gap-3">
          <span className="inline-flex items-center gap-1"><span className="h-2 w-2 rounded-full bg-green-600" /> Trips</span>
        </div>
        <a href="/driver/schedule" className="text-[#7a0019] hover:underline">full calendar</a>
      </div>
    </section>
  );
}


===== ProfilePanel.tsx =====
"use client";
import React from "react";

type ProfilePanelProps = {
  role?: "DRIVER" | "ADMIN" | "FACULTY" | string;
  name: string;
  code: string;
  faculty?: string;
  campus?: string;
  watermarkSrc?: string; // e.g. "/euwhite.png" in /public
};

function initials(full: string) {
  return full
    .split(" ")
    .filter(Boolean)
    .slice(0, 2)
    .map((s) => s[0]?.toUpperCase())
    .join("");
}

export default function ProfilePanel({
  role = "DRIVER",
  name,
  code,
  faculty = "Faculty",
  campus = "Lucena Campus",
  watermarkSrc = "/euwhite.png",
}: ProfilePanelProps) {
  return (
    <section className="relative overflow-hidden rounded-2xl bg-[#7A0E20] text-white">
      {/* subtle watermark */}
      <img
        src={watermarkSrc}
        alt=""
        className="pointer-events-none select-none absolute right-[-24px] top-[-24px] h-40 w-40 opacity-15"
      />

      <div className="p-5 sm:p-6 flex items-start gap-4">
        {/* avatar */}
        <div className="flex h-11 w-11 items-center justify-center rounded-full bg-white/15 ring-1 ring-white/20 text-white font-semibold">
          {initials(name)}
        </div>

        {/* identity */}
        <div className="min-w-0">
          <div className="text-xs uppercase tracking-wide opacity-90">Profile • {role}</div>
          <div className="mt-0.5 text-lg font-semibold leading-tight truncate">{name}</div>
          <div className="text-sm opacity-90">Code: {code}</div>

          {/* chips */}
          <div className="mt-3 flex flex-wrap gap-2">
            <span className="rounded-full bg-white/15 px-2.5 py-1 text-xs font-medium ring-1 ring-white/25">
              {faculty}
            </span>
            <span className="rounded-full bg-white/15 px-2.5 py-1 text-xs font-medium ring-1 ring-white/25">
              {campus}
            </span>
          </div>
        </div>
      </div>
    </section>
  );
}


===== RightRail.tsx =====
"use client";

import ProfilePanel from "@/components/driver/ProfilePanel";
import type { ComponentProps } from "react";
import MiniCalendar from "@/components/driver/MiniCalendar";

/** Import the prop type from ProfilePanel for safety */
type ProfilePanelProps = ComponentProps<typeof ProfilePanel>;

type RightRailProps = {
  /** Optional profile override; we’ll fill sane defaults */
  profile?: Partial<ProfilePanelProps>;
  /** KPIs shown above the calendar */
  kpis?: {
    requests: number;
    online: number;
    pending: number;
  };
  /** NOTE: tripsForCalendar is no longer used; MiniCalendar reads from localStorage */
};

function KPI({ label, value }: { label: string; value: number }) {
  return (
    <div className="rounded-2xl bg-white ring-1 ring-neutral-200/70 shadow-sm p-4 text-center">
      <div className="text-2xl font-semibold leading-tight">{value}</div>
      <div className="mt-1 text-sm text-neutral-600">{label}</div>
    </div>
  );
}

export default function RightRail({
  profile,
  kpis = { requests: 5, online: 3, pending: 4 },
}: RightRailProps) {
  // Build a definite profile object for ProfilePanel
  const p: ProfilePanelProps = {
    role: profile?.role ?? "DRIVER",
    name: profile?.name ?? "Driver",
    code: profile?.code ?? "—",
    faculty: profile?.faculty ?? "Driver",
    campus: profile?.campus ?? "Lucena Campus",
    watermarkSrc: profile?.watermarkSrc ?? "/euwhite.png",
  };

  return (
    <aside className="w-full xl:w-[320px] shrink-0 space-y-4 xl:sticky xl:top-20">
      <ProfilePanel {...p} />

      {/* KPIs */}
      <div className="grid grid-cols-3 gap-3">
        <KPI label="Active Requests" value={kpis.requests} />
        <KPI label="Vehicles Online" value={kpis.online} />
        <KPI label="Pending Approvals" value={kpis.pending} />
      </div>

      {/* Mini calendar — no props */}
      <MiniCalendar />
    </aside>
  );
}


===== ScheduleTable.tsx =====
import { UPCOMING } from "@/app/lib/mock";

export default function ScheduleTable() {
  return (
    <div className="card p-0 overflow-hidden">
      <div className="px-5 py-4 font-semibold">Upcoming Schedules</div>
      <div className="border-t border-tl-line">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr className="text-left text-tl.gray3">
              <th className="px-5 py-3">Date</th>
              <th className="px-5 py-3">Location</th>
              <th className="px-5 py-3">Vehicle</th>
              <th className="px-5 py-3">Driver</th>
              <th className="px-5 py-3">Status</th>
              <th className="px-5 py-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {UPCOMING.map((r) => (
              <tr key={r.id} className="border-t border-tl-line">
                <td className="px-5 py-3 whitespace-nowrap">
                  <div>{r.date}</div>
                  <div className="text-xs text-tl.gray3">{r.time}</div>
                </td>
                <td className="px-5 py-3">{r.location}</td>
                <td className="px-5 py-3">{r.vehicle}</td>
                <td className="px-5 py-3">{r.driver ?? "—"}</td>
                <td className="px-5 py-3">
                  <span
                    className={`pill ${
                      r.status === "Approved"
                        ? "bg-green-50 text-green-700 border-green-200"
                        : r.status === "Assigned"
                        ? "bg-blue-50 text-blue-700 border-blue-200"
                        : "bg-amber-50 text-amber-700 border-amber-200"
                    }`}
                  >
                    {r.status}
                  </span>
                </td>
                <td className="px-5 py-3">
                  <div className="flex gap-2">
                    <button className="btn">View</button>
                    <button className="btn btn-solid">Update</button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


===== Sidebar.tsx =====
"use client";

import { useMemo } from "react";
import { usePathname } from "next/navigation";
import { CalendarDays, LayoutGrid, User2, Settings as Cog } from "lucide-react";
import SidebarView, { type NavItem, type NavLink } from "@/components/driver/SidebarView";

function scoreMatch(pathname: string, href: string) {
  const a = (pathname || "/").replace(/\/+$/, "");
  const b = href.replace(/\/+$/, "");
  if (a === b) return b.length;
  if (a.startsWith(b + "/")) return b.length;
  return -1;
}

export default function Sidebar() {
  const pathname = usePathname() || "/";

  const topLinks: NavLink[] = [
    { kind: "link", href: "/driver",          label: "Dashboard", icon: <LayoutGrid className="h-4 w-4" /> },
    { kind: "link", href: "/driver/schedule", label: "Schedule",  icon: <CalendarDays className="h-4 w-4" /> },
    { kind: "link", href: "/driver/profile",  label: "Profile",   icon: <User2 className="h-4 w-4" /> },
    { kind: "link", href: "/driver/settings", label: "Settings",  icon: <Cog className="h-4 w-4" /> },
  ];

  const activeHref = useMemo(
    () =>
      topLinks.reduce(
        (best, it) => {
          const s = scoreMatch(pathname, it.href);
          return s > best.score ? { href: it.href, score: s } : best;
        },
        { href: "", score: -1 }
      ).href,
    [pathname]
  );

  const items: NavItem[] = topLinks.map((l) => ({ ...l, active: l.href === activeHref }));

  return <SidebarView items={items} />;
}


===== SidebarView.tsx =====
"use client";

import Link from "next/link";
import * as React from "react";

export type NavLink = {
  kind: "link";
  href: string;
  label: string;
  icon?: React.ReactNode;
  active?: boolean;
};

export type NavItem = NavLink;

export default function SidebarView({ items }: { items: NavItem[] }) {
  return (
    <aside className="w-full h-full p-3">
      <nav className="space-y-1">
        {items.map((it) => (
          <Link
            key={it.href}
            href={it.href}
            className={[
              "flex items-center gap-2 rounded-lg px-3 py-2 text-sm",
              it.active
                ? "bg-[var(--brand,#7a0019)]/10 text-[var(--brand,#7a0019)] ring-1 ring-[var(--brand,#7a0019)]/20"
                : "text-neutral-700 hover:bg-neutral-100",
            ].join(" ")}
          >
            {it.icon && <span className="shrink-0">{it.icon}</span>}
            <span className="truncate">{it.label}</span>
          </Link>
        ))}
      </nav>
    </aside>
  );
}


===== Topbar.tsx =====
"use client";

import Link from "next/link";
import { Search, Bell } from "lucide-react";

export default function Topbar({ title }: { title?: string }) {
  return (
    <header className="sticky top-0 z-40 w-full bg-[var(--brand)] text-white border-b border-white/10">
      <div className="flex items-center justify-between px-4 sm:px-6 py-2">
        {/* Brand — now clickable to /driver with small gray “| Driver” */}
        <Link href="/driver" className="flex items-center gap-2 group">
          <span className="inline-flex h-7 w-7 items-center justify-center rounded-md bg-white/15 font-semibold">
            TL
          </span>
          <span className="hidden sm:flex items-baseline gap-2 font-semibold tracking-wide">
            <span>TraviLink</span>
            <span className="text-white/70 text-xs font-normal align-baseline">
              | Driver
            </span>
          </span>
        </Link>

        {/* Right side: search + bell */}
        <div className="flex items-center gap-3">
          <div className="relative w-[220px] sm:w-[280px] md:w-[340px]">
            <input
              placeholder="Search schedules, vehicles, drivers…"
              className="w-full rounded-full bg-white pl-9 pr-3 py-2 text-sm text-[var(--ink-900)] placeholder:text-[var(--ink-500)] outline-none border border-white/30 focus:border-[var(--brand)] focus:ring-2 focus:ring-[var(--brand)]/20"
            />
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-[var(--ink-500)]" />
          </div>
          <button
            aria-label="Notifications"
            className="inline-grid h-9 w-9 place-items-center rounded-full bg-white/15 hover:bg-white/20"
          >
            <Bell className="h-4 w-4 text-white" />
          </button>
        </div>
      </div>
    </header>
  );
}


===== VehicleCard.tsx =====
"use client";
import { ClipboardList, Info } from "lucide-react";

/** Local minimal types so we don't depend on '@/app/lib/mock' */
type VehicleStatus = "available" | "offline" | "maintenance";
type Vehicle = { id: string; name: string; type: string; status: VehicleStatus };

function StatusPill({ s }: { s: VehicleStatus }) {
  const map: Record<VehicleStatus, string> = {
    available: "bg-green-50 text-green-700 border-green-200",
    maintenance: "bg-gray-100 text-gray-700 border-gray-200",
    offline: "bg-gray-100 text-gray-700 border-gray-200",
  };
  const label = s === "available" ? "Available" : "Unavailable";
  return <span className={`pill ${map[s]}`}>{label}</span>;
}

export default function VehicleCard({ v }: { v: Vehicle }) {
  return (
    <div className="card p-4">
      <div className="flex items-start justify-between">
        <div>
          <div className="text-sm text-tl.gray3">{v.type}</div>
          <div className="text-lg font-semibold">{v.name}</div>
        </div>
        <StatusPill s={v.status} />
      </div>

      <div className="h-24 my-4 grid place-items-center rounded-xl border border-dashed border-tl-line bg-gray-50 text-tl.gray4 text-sm">
        Vehicle image
      </div>

      <div className="flex gap-2">
        <button className="btn">
          <ClipboardList size={16} /> Schedule
        </button>
        <button className="btn">
          <Info size={16} /> Details
        </button>
      </div>
    </div>
  );
}


===== dashboard\DashboardView.tsx =====
"use client";

import Link from "next/link";
import { ArrowRight, CalendarDays, Users, Clock } from "lucide-react";
import { FleetSnapshot, type FleetVehicle } from "@/components/driver/FleetSnapshot"; // ✅ named import

export type Status = "Pending" | "Approved" | "Assigned";

export type UpcomingRow = {
  id: string;
  date: string;      // "YYYY-MM-DD HH:mm"
  location: string;
  vehicle: string;
  status: Status;
};

export type Metrics = { trips: number; online: number; pending: number };

const tone = (s: Status) =>
  s === "Approved" ? "bg-green-100 text-green-700"
  : s === "Pending" ? "bg-amber-100 text-amber-700"
  : "bg-blue-100 text-blue-700";

function ActionCard({ icon, title, desc, href }:{
  icon: React.ReactNode; title: string; desc: string; href: string;
}) {
  return (
    <Link
      href={href}
      className="group relative block overflow-hidden rounded-xl border border-neutral-200 bg-white p-5 shadow-sm transition hover:border-[#7a0019] hover:shadow-md"
    >
      <span className="pointer-events-none absolute inset-x-0 top-0 h-[3px] origin-left scale-x-0 bg-[#7a0019] transition-transform duration-300 group-hover:scale-x-100" />
      <div className="mb-3 grid h-12 w-12 place-items-center rounded-lg bg-[#7a0019]">
        <div className="text-white">{icon}</div>
      </div>
      <div className="font-semibold">{title}</div>
      <p className="mt-1 text-sm text-neutral-600">{desc}</p>
      <div className="mt-3 flex items-center gap-1 text-[#7a0019]">
        <span className="text-sm">More</span>
        <ArrowRight className="h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
      </div>
    </Link>
  );
}

function MetricCard({ icon, label, value }:{
  icon: React.ReactNode; label: string; value: number | string;
}) {
  return (
    <div className="rounded-xl bg-white p-4 shadow-sm ring-1 ring-neutral-200/70">
      <div className="flex items-center gap-3">
        <div className="grid h-10 w-10 place-items-center rounded-lg bg-[#7a0019]/10 text-[#7a0019]">
          {icon}
        </div>
        <div>
          <div className="text-xs uppercase tracking-wide text-neutral-500">{label}</div>
          <div className="text-lg font-semibold">{value}</div>
        </div>
      </div>
    </div>
  );
}

const SHOW_SNAPSHOT = true;

export default function DashboardView({
  metrics, upcoming, actions, fleet,
}:{
  metrics: Metrics;
  upcoming: UpcomingRow[];
  actions: Array<{ icon: React.ReactNode; title: string; desc: string; href: string }>;
  fleet?: FleetVehicle[];
}) {
  const cleanActions = actions.filter((a) => {
    const t = a.title?.toLowerCase?.() ?? "";
    return !(a.href?.startsWith?.("/driver/maintenance")) && !t.includes("maintenance");
  });

  return (
    <div className="px-4 py-6 sm:px-6 lg:px-8">
      {/* Header */}
      <div className="mb-6 flex flex-wrap items-center justify-between gap-3">
        <div>
          <h1 className="text-2xl font-semibold">Driver Transport Portal</h1>
          <p className="text-sm text-neutral-600">See upcoming trips and update your status.</p>
        </div>
        <div className="flex gap-2">
          <Link href="/driver/status" className="btn btn-primary">Update Status</Link>
          <Link href="/driver/schedule" className="btn btn-outline">View Schedule</Link>
        </div>
      </div>

      {/* Metrics */}
      <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-3">
        <MetricCard icon={<CalendarDays className="h-5 w-5" />} label="Trips"   value={metrics.trips} />
        <MetricCard icon={<Users className="h-5 w-5" />}       label="Online"  value={metrics.online} />
        <MetricCard icon={<Clock className="h-5 w-5" />}       label="Pending" value={metrics.pending} />
      </div>

      {/* Actions */}
      <div className="mt-6 grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-3">
        {cleanActions.map((a) => (
          <ActionCard key={`${a.title}-${a.href}`} {...a} />
        ))}
      </div>

      {/* Fleet Snapshot */}
      {SHOW_SNAPSHOT && fleet && fleet.length > 0 && (
        <div className="mt-6">
          <FleetSnapshot title="Fleet Snapshot (Read Only)" vehicles={fleet} />
        </div>
      )}

      {/* Upcoming + Quick note */}
      <div className="mt-6 grid grid-cols-1 gap-6 xl:grid-cols-2">
        {/* ... unchanged ... */}
      </div>
    </div>
  );
}


===== profile\ProfileView.tsx =====
import { PageHeader, PageBody } from "@/components/common/Page";
import type { DriverProfile } from "@/app/types/driverProfile";
import { useMemo } from "react";

const card = "rounded-2xl bg-white ring-1 ring-neutral-200/70 shadow-sm";
const section = `${card} p-5`;
const fieldLabel = "text-sm font-medium text-neutral-700";
const fieldInput =
  "w-full rounded-lg border border-neutral-200 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-[#7a0019]/20 focus:border-[#7a0019]/50";
const help = "text-xs text-neutral-500";

export type PasswordState = { new: string; confirm: string };

type Props = {
  formId?: string;
  profile: DriverProfile;
  errors: Record<string, string>;
  password: PasswordState;
  saving: boolean;
  savedAt: string | null;
  fileInputRef: React.RefObject<HTMLInputElement | null>;

  onSubmit: (e: React.FormEvent) => void;
  onChange: <K extends keyof DriverProfile>(key: K, value: DriverProfile[K]) => void;
  onToggleCanDrive: (vehicle: string) => void;
  onPasswordChange: (patch: Partial<PasswordState>) => void;
  onAvatarFile: (file?: File) => void;
};

export default function ProfileView({
  formId = "driverProfileForm",
  profile, errors, password, saving, savedAt,
  fileInputRef, onSubmit, onChange, onToggleCanDrive, onPasswordChange, onAvatarFile,
}: Props) {

  const initials = useMemo(() => {
    const f = profile.firstName?.[0] ?? "";
    const l = profile.lastName?.[0] ?? "";
    return (f + l).toUpperCase() || "D";
  }, [profile.firstName, profile.lastName]);

  return (
    <>
      <PageHeader
        title="Profile"
        description="Manage your driver details and preferences."
        actions={
          <button type="submit" form={formId} disabled={saving} className="btn btn-primary">
            {saving ? "Saving…" : "Save Changes"}
          </button>
        }
      />

      <PageBody>
        <div className="grid grid-cols-1 xl:grid-cols-[1fr_360px] gap-5">
          {/* LEFT: FORM */}
          <form id={formId} onSubmit={onSubmit} className="space-y-5 min-w-0">
            {/* Personal */}
            <section className={section}>
              <h2 className="mb-3 font-medium">Personal Information</h2>

              <div className="flex items-center gap-4 mb-4">
                <div className="relative">
                  {profile.avatar ? (
                    <img src={profile.avatar} alt="Avatar preview"
                      className="h-16 w-16 rounded-full object-cover ring-1 ring-neutral-200/70" />
                  ) : (
                    <div className="h-16 w-16 rounded-full bg-neutral-100 text-neutral-700 grid place-items-center text-lg font-semibold ring-1 ring-neutral-200/70">
                      {initials}
                    </div>
                  )}
                </div>
                <div className="space-y-1.5">
                  <button type="button"
                    onClick={() => fileInputRef.current?.click()}
                    className="rounded-lg border border-neutral-200 px-3 py-1.5 text-sm hover:bg-neutral-50">
                    Change photo
                  </button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={(e) => onAvatarFile(e.target.files?.[0])}
                  />
                  <div className={help}>JPG/PNG, up to ~2MB.</div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className={fieldLabel}>First name *</label>
                  <input className={fieldInput} value={profile.firstName}
                    onChange={(e) => onChange("firstName", e.target.value)} />
                  {errors.firstName && <p className="mt-1 text-xs text-red-600">{errors.firstName}</p>}
                </div>
                <div>
                  <label className={fieldLabel}>Last name *</label>
                  <input className={fieldInput} value={profile.lastName}
                    onChange={(e) => onChange("lastName", e.target.value)} />
                  {errors.lastName && <p className="mt-1 text-xs text-red-600">{errors.lastName}</p>}
                </div>
                <div className="md:col-span-2">
                  <label className={fieldLabel}>Email</label>
                  <input className={fieldInput} placeholder="you@example.com" value={profile.email ?? ""}
                    onChange={(e) => onChange("email", e.target.value)} />
                  {errors.email && <p className="mt-1 text-xs text-red-600">{errors.email}</p>}
                </div>
              </div>
            </section>

            {/* Organization */}
            <section className={section}>
              <h2 className="mb-3 font-medium">Organization</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className={fieldLabel}>Campus *</label>
                  <input className={fieldInput} value={profile.campus}
                    onChange={(e) => onChange("campus", e.target.value)} placeholder="e.g., Lucena" />
                  {errors.campus && <p className="mt-1 text-xs text-red-600">{errors.campus}</p>}
                </div>
                <div>
                  <label className={fieldLabel}>Department</label>
                  <input className={fieldInput} value={profile.dept ?? ""}
                    onChange={(e) => onChange("dept", e.target.value)} placeholder="e.g., Transport" />
                </div>
                <div className="md:col-span-2">
                  <label className={fieldLabel}>Phone</label>
                  <input className={fieldInput} value={profile.phone ?? ""}
                    onChange={(e) => onChange("phone", e.target.value)} placeholder="09XX XXX XXXX" />
                </div>
              </div>
            </section>

            {/* License & Capability */}
            <section className={section}>
              <h2 className="mb-3 font-medium">License & Capability</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className={fieldLabel}>License number *</label>
                  <input className={fieldInput} value={profile.license}
                    onChange={(e) => onChange("license", e.target.value)} placeholder="e.g., DL-1234-5678" />
                  {errors.license && <p className="mt-1 text-xs text-red-600">{errors.license}</p>}
                </div>
                <div>
                  <label className={fieldLabel}>Can drive</label>
                  <div className="flex flex-wrap gap-2 mt-1">
                    {["Bus", "Van", "Car", "Truck"].map((v) => {
                      const active = profile.canDrive.includes(v);
                      return (
                        <button key={v} type="button"
                          onClick={() => onToggleCanDrive(v)}
                          className={active
                            ? "rounded-full bg-[#7a0019] text-white text-xs px-3 py-1 shadow-sm"
                            : "rounded-full bg-neutral-100 text-neutral-800 text-xs px-3 py-1 ring-1 ring-neutral-200/70"}>
                          {v}
                        </button>
                      );
                    })}
                  </div>
                  <div className={`${help} mt-1`}>Click to toggle. Saved as a list.</div>
                </div>
              </div>
            </section>

            {/* Preferences */}
            <section className={section}>
              <h2 className="mb-3 font-medium">Preferences</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <label className="flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={profile.notifyEmail}
                    onChange={(e) => onChange("notifyEmail", e.target.checked)} />
                  Email notifications
                </label>
                <label className="flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={profile.notifyPush}
                    onChange={(e) => onChange("notifyPush", e.target.checked)} />
                  Push notifications
                </label>
              </div>
              <p className={`${help} mt-2`}>
                You’ll receive updates about request approvals, schedule changes, and reminders.
              </p>
            </section>

            {/* Security */}
            <section className={section}>
              <h2 className="mb-3 font-medium">Security</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className={fieldLabel}>New password</label>
                  <input type="password" className={fieldInput} value={password.new}
                    onChange={(e) => onPasswordChange({ new: e.target.value })}
                    placeholder="Min 8 characters" />
                  {errors.passwordNew && <p className="mt-1 text-xs text-red-600">{errors.passwordNew}</p>}
                </div>
                <div>
                  <label className={fieldLabel}>Confirm new password</label>
                  <input type="password" className={fieldInput} value={password.confirm}
                    onChange={(e) => onPasswordChange({ confirm: e.target.value })} />
                  {errors.passwordConfirm && <p className="mt-1 text-xs text-red-600">{errors.passwordConfirm}</p>}
                </div>
              </div>
              <p className={`${help} mt-2`}>Leave blank to keep your current password.</p>
            </section>
          </form>

          {/* RIGHT: summary card */}
          <aside className="space-y-5">
            <section className="rounded-2xl bg-[#7A0E20] text-white relative overflow-hidden p-5">
              <img src="/euwhite.png" alt="" className="pointer-events-none select-none absolute right-[-24px] top-[-24px] h-40 w-40 opacity-15" />
              <div className="flex items-center gap-3">
                {profile.avatar ? (
                  <img src={profile.avatar} alt="Avatar" className="h-10 w-10 rounded-full object-cover border border-white/20" />
                ) : (
                  <div className="h-10 w-10 rounded-full bg-white/10 grid place-items-center font-semibold">
                    {initials}
                  </div>
                )}
                <div>
                  <div className="text-lg font-semibold">
                    {profile.firstName || profile.lastName
                      ? `${profile.firstName} ${profile.lastName}`.trim()
                      : "Driver"}
                  </div>
                  <div className="text-xs opacity-90">Driver • {profile.campus || "—"}</div>
                </div>
              </div>
              {savedAt && <div className="mt-3 text-xs opacity-90">Last saved: {savedAt}</div>}
            </section>

            <section className={section}>
              <h3 className="font-medium mb-2">Account tips</h3>
              <ul className="list-disc pl-5 text-sm text-neutral-700 space-y-1">
                <li>Keep your license number updated for dispatch validation.</li>
                <li>Use “Can drive” so schedulers assign the right vehicle.</li>
                <li>Enable notifications so you don’t miss trip updates.</li>
              </ul>
            </section>
          </aside>
        </div>
      </PageBody>
    </>
  );
}


===== schedule\ScheduleView.tsx =====
import Link from "next/link";
import { CalendarDays, MapPin, BusFront, User2, BadgeCheck, Clock, Edit3 } from "lucide-react";
import { PageHeader, PageBody } from "@/components/common/Page";
import { statusTone } from "@/lib/data/statusTone";
import type { DriverScheduleRow } from "@/app/types/schedule";

type Props = {
  rows: DriverScheduleRow[];
  // optional overrides so you can wire custom handlers later (e.g., modals)
  makeViewHref?: (row: DriverScheduleRow) => string;
  makeUpdateHref?: (row: DriverScheduleRow) => string;
  title?: string;
  description?: string;
};

export default function ScheduleView({
  rows,
  makeViewHref = (r) => `/driver/schedule/${r.id}`,
  makeUpdateHref = (r) => `/driver/status?trip=${r.id}`,
  title = "My Schedule",
  description = "See upcoming assignments, check details, and keep your status up to date.",
}: Props) {
  return (
    <>
      <PageHeader
        title={title}
        description={description}
        actions={
          <div className="flex gap-2">
            <Link href="/driver/status" className="btn btn-primary">Update Status</Link>
            <Link href="/driver/history" className="btn btn-outline">Trip History</Link>
          </div>
        }
      />

      <PageBody>
        <section className="rounded-2xl ring-1 ring-neutral-200/70 bg-white shadow-sm overflow-hidden">
          <div className="flex items-center justify-between px-4 sm:px-5 py-3 border-b border-neutral-200/80">
            <div className="flex items-center gap-2">
              <CalendarDays className="h-5 w-5 text-[var(--brand,#7a0019)]" />
              <h2 className="font-semibold">Upcoming Schedules</h2>
            </div>
            <div className="hidden md:flex items-center gap-3 text-xs text-neutral-500">
              <span className="inline-flex items-center gap-1"><span className="h-2 w-2 rounded-full bg-green-600/80" /> Approved</span>
              <span className="inline-flex items-center gap-1"><span className="h-2 w-2 rounded-full bg-amber-600/80" /> Pending</span>
              <span className="inline-flex items-center gap-1"><span className="h-2 w-2 rounded-full bg-blue-600/80" /> Assigned</span>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead className="bg-neutral-50/70 text-neutral-600">
                <tr className="border-b border-neutral-200/70">
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Date</th>
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Location</th>
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Vehicle</th>
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Driver</th>
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Status</th>
                  <th className="px-4 sm:px-5 py-3 text-left font-medium">Actions</th>
                </tr>
              </thead>

              <tbody className="divide-y divide-neutral-200/70">
                {rows.map((r) => {
                  const [d, t] = r.date.split(" ");
                  return (
                    <tr key={r.id} className="hover:bg-neutral-50/70 transition-colors">
                      <td className="px-4 sm:px-5 py-3 min-w-[140px]">
                        <div className="font-medium">{d}</div>
                        <div className="text-xs text-neutral-500">{t}</div>
                      </td>

                      <td className="px-4 sm:px-5 py-3 min-w-[180px]">
                        <div className="flex items-center gap-2">
                          <span className="inline-grid h-8 w-8 place-items-center rounded-lg bg-neutral-100">
                            <MapPin className="h-4 w-4 text-neutral-700" />
                          </span>
                          <div className="font-medium">{r.location}</div>
                        </div>
                      </td>

                      <td className="px-4 sm:px-5 py-3">
                        <div className="flex items-center gap-2">
                          <span className="inline-grid h-8 w-8 place-items-center rounded-lg bg-neutral-100">
                            <BusFront className="h-4 w-4 text-neutral-700" />
                          </span>
                          <span>{r.vehicle}</span>
                        </div>
                      </td>

                      <td className="px-4 sm:px-5 py-3">
                        <div className="flex items-center gap-2 text-neutral-800">
                          <User2 className="h-4 w-4 text-neutral-500" />
                          {r.driver ? r.driver : <span className="text-neutral-400">—</span>}
                        </div>
                      </td>

                      <td className="px-4 sm:px-5 py-3">
                        <span className={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium ${statusTone(r.status)}`}>
                          {r.status === "Approved" && <BadgeCheck className="h-3.5 w-3.5" />}
                          {r.status === "Pending" && <Clock className="h-3.5 w-3.5" />}
                          {r.status === "Assigned" && <BusFront className="h-3.5 w-3.5" />}
                          {r.status}
                        </span>
                      </td>

                      <td className="px-4 sm:px-5 py-3">
                        <div className="flex items-center gap-2">
                          <Link href={makeViewHref(r)} className="inline-flex items-center gap-1 rounded-full border border-neutral-300 bg-white px-3 py-1.5 text-xs font-medium text-neutral-700 hover:bg-neutral-50">
                            View
                          </Link>
                          <Link href={makeUpdateHref(r)} className="inline-flex items-center gap-1 rounded-full border border-[#7a0019]/20 bg-[#7a0019]/10 px-3 py-1.5 text-xs font-medium text-[#7a0019] hover:bg-[#7a0019]/15">
                            <Edit3 className="h-3.5 w-3.5" />
                            Update
                          </Link>
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </section>
      </PageBody>
    </>
  );
}


===== settings\SettingsView.tsx =====
"use client";

import { PageHeader, PageBody } from "@/components/common/Page";
import type { DriverSettings } from "@/app/(protected)/driver/settings/page";

const card = "rounded-2xl bg-white ring-1 ring-neutral-200/70 shadow-sm";
const section = `${card} p-5`;
const label = "text-sm font-medium text-neutral-700";
const input =
  "w-full rounded-lg border border-neutral-200 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-[#7a0019]/20 focus:border-[#7a0019]/50";
const help = "text-xs text-neutral-500";

export default function SettingsView({
  formId = "driverSettingsForm",
  settings,
  saving,
  savedAt,
  onChange,
  onSubmit,
}: {
  formId?: string;
  settings: DriverSettings;
  saving: boolean;
  savedAt: string | null;
  onChange: <K extends keyof DriverSettings>(k: K, v: DriverSettings[K]) => void;
  onSubmit: (e: React.FormEvent) => void;
}) {
  return (
    <>
      <PageHeader
        title="Settings"
        description="Tune how the app behaves for your day-to-day driving."
        actions={
          <button type="submit" form={formId} className="btn btn-primary" disabled={saving}>
            {saving ? "Saving…" : "Save Settings"}
          </button>
        }
      />

      <PageBody>
        <form id={formId} onSubmit={onSubmit} className="space-y-5 max-w-3xl">
          {/* Notifications */}
          <section className={section}>
            <h2 className="mb-3 font-medium">Notifications</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.notifyAssignments}
                  onChange={(e) => onChange("notifyAssignments", e.target.checked)}
                />
                New assignments
              </label>
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.notifyChanges}
                  onChange={(e) => onChange("notifyChanges", e.target.checked)}
                />
                Changes & cancellations
              </label>
              <div>
                <div className={label}>Reminder lead time</div>
                <select
                  className={input}
                  value={settings.reminderMinutes}
                  onChange={(e) => onChange("reminderMinutes", Number(e.target.value) as DriverSettings["reminderMinutes"])}
                >
                  {[5, 10, 15, 30].map((m) => (
                    <option key={m} value={m}>
                      {m} minutes before
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </section>

          {/* Status & Workday */}
          <section className={section}>
            <h2 className="mb-3 font-medium">Status & Workday</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <div className={label}>Default status on app open</div>
                <select
                  className={input}
                  value={settings.defaultStatusOnOpen}
                  onChange={(e) => onChange("defaultStatusOnOpen", e.target.value as DriverSettings["defaultStatusOnOpen"])}
                >
                  <option value="Available">Available</option>
                  <option value="Off Duty">Off Duty</option>
                </select>
              </div>
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.autoOnTripOnBegin}
                  onChange={(e) => onChange("autoOnTripOnBegin", e.target.checked)}
                />
                Auto-set status to “On Trip” when I tap Begin Trip
              </label>
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.promptOffDutyEOD}
                  onChange={(e) => onChange("promptOffDutyEOD", e.target.checked)}
                />
                End-of-day prompt to switch to Off Duty
              </label>
            </div>
          </section>

          {/* Location & Privacy */}
          <section className={section}>
            <h2 className="mb-3 font-medium">Location & Privacy</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.shareLiveLocation}
                  onChange={(e) => onChange("shareLiveLocation", e.target.checked)}
                />
                Share live location during active trips
              </label>
              <label className="flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={settings.bgLocationWhileOnTrip}
                  onChange={(e) => onChange("bgLocationWhileOnTrip", e.target.checked)}
                />
                Allow background location while “On Trip”
              </label>
              <div className="md:col-span-2">
                <div className={label}>Who can see my live location</div>
                <select
                  className={input}
                  value={settings.locationVisibility}
                  onChange={(e) =>
                    onChange("locationVisibility", e.target.value as DriverSettings["locationVisibility"])
                  }
                >
                  <option value="dispatcher">Dispatcher only</option>
                  <option value="dispatcher_requester">Dispatcher & Requester</option>
                </select>
                <p className={`${help} mt-1`}>You can change this anytime.</p>
              </div>
            </div>
          </section>

          {/* Display */}
          <section className={section}>
            <h2 className="mb-3 font-medium">App Display</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div>
                <div className={label}>Language</div>
                <select
                  className={input}
                  value={settings.language}
                  onChange={(e) => onChange("language", e.target.value as DriverSettings["language"])}
                >
                  <option value="ph">Filipino</option>
                  <option value="en">English</option>
                </select>
              </div>
              <div>
                <div className={label}>Theme</div>
                <select
                  className={input}
                  value={settings.theme}
                  onChange={(e) => onChange("theme", e.target.value as DriverSettings["theme"])}
                >
                  <option value="system">System</option>
                  <option value="light">Light</option>
                  <option value="dark">Dark</option>
                </select>
              </div>
              <div>
                <div className={label}>Time format</div>
                <select
                  className={input}
                  value={settings.timeFormat}
                  onChange={(e) => onChange("timeFormat", e.target.value as DriverSettings["timeFormat"])}
                >
                  <option value="24h">24-hour</option>
                  <option value="12h">12-hour</option>
                </select>
              </div>
            </div>
            <p className={`${help} mt-2`}>Dates use local timezone by default.</p>
          </section>

          {/* Footer note */}
          <div className="text-xs text-neutral-500 px-1">
            {savedAt ? <>Last saved: {savedAt}</> : <>Not saved yet</>}
          </div>
        </form>
      </PageBody>
    </>
  );
}


===== status\StatusView.tsx =====
import Link from "next/link";
import { PageHeader, PageBody } from "@/components/common/Page";
import { DRIVER_STATUSES, DriverStatus } from "@/app/types/driver";
import { StatusIcon, tone } from "@/lib/data/driverStatus";

type Props = {
  status: DriverStatus;
  onChange: (s: DriverStatus) => void;
  onSave?: () => void;
  onViewHistoryHref?: string;     // or use onViewHistory?: () => void
};

export default function StatusView({ status, onChange, onSave, onViewHistoryHref="/driver/history" }: Props) {
  return (
    <>
      <PageHeader
        title="Update Driver Status"
        description="Select your current availability for trips."
        actions={
          <div className="flex gap-2">
            <button className="btn btn-primary" onClick={onSave}>Save</button>
            <Link className="btn btn-outline" href={onViewHistoryHref}>View History</Link>
          </div>
        }
      />

      <PageBody>
        <section className="rounded-xl ring-1 ring-neutral-200/70 bg-white shadow-sm">
          <div className="border-b border-neutral-200/80 px-4 py-3">
            <h2 className="font-medium">Current Status</h2>
            <p className="text-sm text-neutral-600">
              You are currently marked as:
              <span className={`ml-2 rounded px-2 py-0.5 text-xs ${tone(status)}`}>{status}</span>
            </p>
          </div>

          <div className="grid grid-cols-2 gap-3 p-4 sm:grid-cols-3 md:grid-cols-5">
            {DRIVER_STATUSES.map((s) => (
              <button
                key={s}
                onClick={() => onChange(s)}
                className={`flex flex-col items-center justify-center gap-2 rounded-lg border px-3 py-4 text-sm transition 
                  ${status === s ? "border-[#7a0019] bg-neutral-50 font-semibold" : "border-neutral-200 hover:bg-neutral-50"}`}
              >
                <StatusIcon s={s} />
                {s}
              </button>
            ))}
          </div>
        </section>

        <section className="mt-6 rounded-xl ring-1 ring-neutral-200/70 bg-white shadow-sm">
          <div className="border-b border-neutral-200/80 px-4 py-3">
            <h2 className="font-medium">Quick Actions</h2>
          </div>
          <div className="grid gap-3 p-4 sm:grid-cols-2 lg:grid-cols-3">
            <button className="rounded-lg border border-neutral-200 bg-white p-4 text-left hover:border-[#7a0019] hover:bg-neutral-50" onClick={() => onChange("Available")}>
              <p className="font-medium">Start Shift</p>
              <p className="text-sm text-neutral-600">Set as Available</p>
            </button>
            <button className="rounded-lg border border-neutral-200 bg-white p-4 text-left hover:border-[#7a0019] hover:bg-neutral-50" onClick={() => onChange("On Trip")}>
              <p className="font-medium">Begin Trip</p>
              <p className="text-sm text-neutral-600">Mark as On Trip</p>
            </button>
            <button className="rounded-lg border border-neutral-200 bg-white p-4 text-left hover:border-[#7a0019] hover:bg-neutral-50" onClick={() => onChange("Off Duty")}>
              <p className="font-medium">Take Break</p>
              <p className="text-sm text-neutral-600">Switch to Off Duty</p>
            </button>
          </div>
        </section>
      </PageBody>
    </>
  );
}


